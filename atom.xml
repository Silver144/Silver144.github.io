<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alice Blackbarn</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-12T13:51:26.510Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>30天自制os</title>
    <link href="http://yoursite.com/2019/03/09/30%E5%A4%A9%E8%87%AA%E5%88%B6os/"/>
    <id>http://yoursite.com/2019/03/09/30天自制os/</id>
    <published>2019-03-09T02:19:07.000Z</published>
    <updated>2019-03-12T13:51:26.510Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});</script><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a><strong>Day 0</strong></h3><p>了解基本信息</p><p>1 . 此书所述的操作系统是用C语言和汇编写成的</p><p>2 . 此书的操作环境为Windows</p><p>3 . 步骤为，编写源代码-&gt;编译成机器语言-&gt;生成软盘镜像文件-&gt;写入磁盘并作成启动盘</p><p>4 . 阶段性计划，分四周进行总结</p><p>ps : 背后有什么奇妙深刻原因让老师选用这本书做实践工作，我暂且蒙在启动区的软盘里面</p><a id="more"></a><hr><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a><strong>Day 1</strong></h3><p>由于版本0的.img文件可以为版本1或版本2的.nas文件编译得到，故现将光盘里提供的版本2的汇编程序helloos.nas使用nask.exe编译成helloos.img，并重命名为fdimage0.bin并放入含qemu.exe的文件夹，并调用对应文件夹中的Makefile(启动qemu-win.bat)从而得到结果</p><p>需要注意的地方：</p><p>1 . $代表当前行被汇编后的地址，在部分参考书中还会有$$，这个符号代表当前节被汇编后的地址</p><p>2 . 0x55，0xAA为前512字节的最后两个字节，以0x55，0xAA结尾代表此扇区的开头为一个启动程序</p><hr><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a><strong>Day 2</strong></h3><p>与第一天一样，制作出来的东西作用完全相同，不同的是Day2用8086汇编指令制作启动区，剩下的工作交给磁盘映像管理工具，并在helloos5中将脚本整合成了Makefile文件</p><p>需要注意的地方：</p><p>1 . org 0x7c00. BIOS发现引导扇区后，会将这些内容装载到内存0x7c00处</p><p>2 . int 0x10 为调用中断服务程序，根据ah的不同会有不同的服务，在此程序中                    ah = 0x0e 为显示字符，al为字符的ascii码，bl为前景色</p><p>使用Makefile可以大大提高工作效率</p><hr><h3 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a><strong>Day 3</strong></h3><p>1 . 开始版本(a~d)的作用是读取磁盘中的内容到内存特定位置，首先测试一下，如果屏幕上没出现错误信息那么就成功了，符合预期</p><p>(1) . 调用 int 0x13，ah = 0x02作用为读取磁盘内容，al为扇区数，ch为柱面号，cl为扇区号，dh为磁头号，dl为驱动器号，es:bx为缓冲区地址，实际地址为es <script type="math/tex">\times</script> 0x10 + bx</p><p>(2) . 考虑到从磁盘数据读取可能会出现问题，因此示例程序增加了retry部分，并设置retry次数上限</p><p>2 . 中间的版本(e~g)将引导区代码和操作系统代码分开，并用工具写入同一个磁盘，对g进行测试，qemu界面为全黑，符合预期</p><p>(1) . 在haribote.img中，操作系统文件名存储在0x2600处，主体部分存储在0x4200处，在(e)中，主体只有三个字节</p><p>(2) . 由于磁盘内容被转移至以0x8000为头的内存区域，故操作系统主体在内存中的位置为0xc200，在代码开头要加上org 0xc200，并在ipl.nas的next代码段最后加上jmp 0xc200</p><p>(3) . 为了能够有显示，需要调用int 0x10，令ah = 0x00即为设定显示模式，al为想要设定的模式，此处设定al = 0x13，因此，如果确实执行了我们的操作系统的代码，画面将会变为全黑</p><p>3 . 接下来的版本(h~j)进入32位模式并导入c语言</p><p>(1) . 记录BOOT_INFO，包括画面模式(示例代码为320x200x8bit)，VRAM地址等</p><p>(2) . 将haribote.nas改为asmhead.nas，加入新的代码来切换32位模式并调用c程序</p><p>(3) . 示例程序为bootpack.c，先编译成.gas文件，然后转化为.nas文件，再制作成.obj文件，生成.bim二进制映像文件，最后处理为.hrb二进制文件</p><p>(4) . 由Makefile可知，作者将asmhead.nas编译为asmhead.bin并与bootpack.hrb做成haribote.sys，导入ipl10.bin所在的.img文件中</p><p>(5) . 在(j)中为了实现HLT，使用naskfunc.nas汇编代码设置全局函数，并在.c文件中调用</p><p>测试，若黑屏则基本正确，结果符合预期</p><hr><h3 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a><strong>Day 4</strong></h3><p>今天的内容是用c语言将数据写入显存区域(0xa0000~0xaffff)，从而在屏幕上显示图案</p><p>在harib01a中，函数由汇编编写，参数存放在栈中，让c程序进行调用，显示的效果为纯白屏</p><p>harib01b与harib01a差别不大，使用&amp;运算符将图案与地址产生关联从而让图案条形化</p><p>harib01c则不需要用汇编，直接使用指针将数据写入显存，d，e均为指针的应用</p><p>harib01f为颜色的设定</p><p>(1) . 作者使用字符数组，设置每三个相邻的字符为一个颜色的R，G，B，先使用io_out()将调色板号写入0x03c8，然后按R，G，B的顺序写入0x03c9，重复16次，调色板设置完毕</p><p>(2) . 进行端口写入时，要关闭中断，可由cli实现，结束后应使用sti恢复中断位，本书中因为中断位存储在EFLAGS寄存器中，可提前将EFLAGS使用pushfd入栈，操作完后使用popfd出栈</p><p>harib01g与harib01h是在harib01f的基础上的实践，使用调好的颜色绘制了矩形，我在这里稍微修改了一下代码，画了一个三角形</p><h3 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a><strong>Day 5</strong></h3><p>为了使用方便与灵活，将画面信息使用指针存储到变量中，然后将相关信息组织成结构体，易于调用</p><p>a，b，c均是在介绍结构体，从d开始回到显示上去</p><p>d中显示字符使用8<script type="math/tex">\times</script>16的长方形像素点阵来表示一个字符，使用位运算的方法将字符写入显存</p><p>e中增加了字符，使用makefont.exe将字符文件编译成二进制文件，处理之后再链接，就可以通过hankaku + ch <script type="math/tex">\times</script> 16来索引相关的字符了，f则在e的基础上实现了显示字符串的功能，g则使用sprintf函数将变量的值化为字符串从而显示到屏幕上，h在内存中存储了一个大小为16<script type="math/tex">\times</script>16的鼠标指针(透明的地方填充背景色)</p><p>i中进行了GDT的初始化(其实在进入32位的时候就已经使用GDT了)</p><p>1 . GDT全称Global Descriptor Table，作用是存放段的描述符，其入口由LGDT指令加载到GDTR，LDT就是Local Descriptor Table</p><p>2 . 段描述符包括段长，段界限，段属性</p><p>首先初始了8192个段，程序中界定了两个段，第一个大小为0xffffffff，基地址为0x00000000，属性为0x4092，第二个大小为0x0007ffff，基地址为0x00280000，属性为0x409a，使用LGDT命令将GDT加载到0x00270000</p><p>IDT为中断描述符表，CPU在执行中断程序时，会在IDT中查找对应的中断服务程序，详细内容作者准备第二天再讲</p><h3 id="Day-6"><a href="#Day-6" class="headerlink" title="Day 6"></a><strong>Day 6</strong></h3><p>开始的工作是分割了源文件，组织头文件，以及整理了Makefile文件，使得结构更加清晰易懂，编译速度也更快，接下来对Day 5的GDT的知识做了相关补充</p><p>1 . GDTR为48位，高32位存放GDT基址，低16位存放GDT限长(为GDT字节数-1)，IDTR类似</p><p>2 . 在段描述符中，存在把段基址和段大小分成若干部分的现象，这是为了与之前的80286时代的程序兼容</p><p>3 . 实际上段界限最多只有20位，表面上有3个字节，实际上有4bit为段属性，这样的话，段的大小最大为1M，但是如果把单位解释称页，就可以达到4G</p><p>4 . 设置段属性的作用是防止非特权级程序访问系统专用段，从而危害操作系统</p><p>接下来是中断的一些重要知识</p><p>1 . PIC分为主从PCI，从PIC连接到主PIC的IRQ2上</p><p>2 . PIC内部有中断屏蔽寄存器，8位对应8路IRQ信号，用于忽视中断请求，还有初始化控制数据ICW，ICW1、ICW4用于设置电气参数，ICW3设置为00000100是因为IRQ2用于驱动从PIC，ICW2决定用哪一个管脚通知CPU</p><p>3 . int 0x00~0x1f不能用于IRQ，故用int 0x20~0x2f接收IRQ0~15，键盘是IRQ1，鼠标是IRQ12，而对于部分计算机PIC初始化时会产生IRQ7中断</p><p>4 . 在调用inthandler21时，需要保护现场(相关寄存器压栈)，执行完返回前要恢复现场(寄存器出栈)，然后执行IRETD</p><p>5 . 使用中断处理函数前，需要在IDT中进行注册，这样，CPU在发生中断时，就会自动调用相关处理函数，我在这里修改了一下函数，如果发生键盘中断，则显示keyboard interruption!</p><p>测试成功</p><h3 id="Day-7"><a href="#Day-7" class="headerlink" title="Day 7"></a><strong>Day 7</strong></h3><p>接着上一天的工作，在处理键盘中断的同时获得按键的编码，在此之前，在inthandler21函数中添加一句io_out8(PIC_OCW2, 0x61); 使得PIC能够继续监视IRQ1中断，读取0x60端口的数据，即为大小为8bit的按键编码</p><p>为了减少中断服务程序的大小，暂时设立了一个大小为1个字节的缓冲区，并修改HariMain函数使得产生键盘中断时能够CPU能够被唤醒并打印数据，平常情况则休眠，但是如果中断的频率过多则会遗漏，因此要制作FIFO缓冲区</p><p>1 . 根据先来先处理的原则，此缓冲区为FIFO缓冲区</p><p>2 . 缓冲区整合为结构体更加灵活，不仅可以任意取地址，而且可以设置标记来标注其状态</p><p>为了能够接收鼠标中断，要先令鼠标控制电路有效，再令鼠标有效，实际上如果键盘控制电路有效则鼠标电路就有效，然而键盘控制电路并没有CPU快，故许需要等到键盘控制电路可以处理信息时CPU再发送指令，设置为鼠标模式，然后激活鼠标，此时，鼠标会产生一个中断，此处修改了一下代码，若鼠标产生中断，则显示mouse interruption!</p><p>测试成功</p><p>接下来是获得从鼠标发送来鼠标的数据，根据代码可以看出，除了分别通知PIC1、PIC0，IRQ12、IRQ2的受理已经完成，其他的几乎一样，且读数据的端口也是0x60端口，有缓冲区的帮助，获得并使用鼠标数据的方法也简单了，但是我们使用鼠标是为了让它动起来，于是需要把数据进行适当的转换，这就是下一天的工作了</p><h3 id="Day-8"><a href="#Day-8" class="headerlink" title="Day 8"></a><strong>Day 8</strong></h3><p>这一天的首要工作是解读鼠标的信息，并让鼠标在屏幕上移动</p><p>1 . 鼠标发送3个字节的信息为1组，一开始的工作是将3个字节的信息分别放入一个特定的数组，完成后一起显示到屏幕上，其中关于鼠标数据的信息可以整合成结构体</p><p>2 . 在MOUSE_DEC结构体中，unsigned char buf[3]存储鼠标发送的3个字节，phase为其存到第n个字节的状态标识，x为buf[1]的内容，y为buf[2]的内容，根据测试，x、y的含义分别是一段时间内鼠标横纵坐标的<strong>相对变化量</strong>，鼠标的btn为buf[0]的第0~2位，<strong>0~2位为1分别代表操作了左键、右键、滚轮</strong>，根据buf[0]第4位、第5位的值分别对x、y做出修正(实则为将16位负数变为64位负数)，通过初始坐标我们就能计算鼠标的实时坐标</p><p>3 . 在绘制鼠标的时候，注意鼠标不能越界，同时，绘制新的鼠标和坐标前，要先将原来的数据和鼠标用背景色填充，这样，鼠标就可以绘制出来，而且其坐标也能一清二楚，不过需要注意其坐标原点位于左上顶点</p><p>接下来要讨论进入32位模式前的一些工作</p><p>在看的另一本参考书中，进入保护模式的主要步骤有以下几个</p><p>1 . 准备GDT</p><p>2 . 用LGDT加载GDTR</p><p>3 . 打开A20地址线</p><p>4 . 置cr0的PE位</p><p>5 . 跳转，进入保护模式</p><p>在这本书中，首先禁止了中断，防止干扰，然后打开了A20地址线，使CPU获得1M以上的寻址能力，接下来加载了临时的GDT，并设置cr0寄存器，设置PG位为0从而禁止分页，PE位为1从而切换到保护模式，然后将所有的段寄存器(除了CS)设置为0x08</p><p>接下来的代码将bootpack开始的地址开始的512KB的内容复制到0x280000的位置，将0x7c00处的启动扇区复制到0x100000的位置，将0x8200处的磁盘内容复制到0x100200处，这样做是作者设计了内存分布的情况，0x100000~0x267ffff用于保存软盘的内容</p><p>后面的代码就是先对bootpack.hrb中部分内容进行传送，等到没有要传送的数据的时候，从0x28001b执行bootpack.hrb</p><p>接下来的作用就是将0x60端口的冗余数据清理出来，紧接着是memcpy程序，单位为4字节，asmhead.nas的最后则是定义GDT0和GDTR0，并对齐至16字节，通过代码看出，GDT0规定的<strong>可读写段从0x00000000开始，界限为0xfffff，可执行段从0x00280000开始，界限为0x7ffff</strong></p><p>最后在HariMain()中创建GDT和IDT后，初始化PIC，打开中断并进行相关设备的初始化就可以处理中断了，至此，工作已经结束，其中部分问题会在以后解释</p>]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;
&lt;/script&gt;
&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
  MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}});
&lt;/script&gt;

&lt;h3 id=&quot;Day-0&quot;&gt;&lt;a href=&quot;#Day-0&quot; class=&quot;headerlink&quot; title=&quot;Day 0&quot;&gt;&lt;/a&gt;&lt;strong&gt;Day 0&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;了解基本信息&lt;/p&gt;
&lt;p&gt;1 . 此书所述的操作系统是用C语言和汇编写成的&lt;/p&gt;
&lt;p&gt;2 . 此书的操作环境为Windows&lt;/p&gt;
&lt;p&gt;3 . 步骤为，编写源代码-&amp;gt;编译成机器语言-&amp;gt;生成软盘镜像文件-&amp;gt;写入磁盘并作成启动盘&lt;/p&gt;
&lt;p&gt;4 . 阶段性计划，分四周进行总结&lt;/p&gt;
&lt;p&gt;ps : 背后有什么奇妙深刻原因让老师选用这本书做实践工作，我暂且蒙在启动区的软盘里面&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>os异常记录</title>
    <link href="http://yoursite.com/2019/01/05/os%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/01/05/os异常记录/</id>
    <published>2019-01-05T12:33:53.000Z</published>
    <updated>2019-03-12T14:32:53.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2019-1-5-20-34"><a href="#2019-1-5-20-34" class="headerlink" title="2019/1/5 20:34"></a><strong>2019/1/5 20:34</strong></h3><h5 id="错误原因：gdt段基地址的16-23位在结构体中被错误设置成16位"><a href="#错误原因：gdt段基地址的16-23位在结构体中被错误设置成16位" class="headerlink" title="错误原因：gdt段基地址的16~23位在结构体中被错误设置成16位"></a>错误原因：gdt段基地址的16~23位在结构体中被错误设置成16位</h5><script type="math/tex; mode=display">\int_{-\infty}^\infty e^{-x^2}dx=\sqrt \pi</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2019-1-5-20-34&quot;&gt;&lt;a href=&quot;#2019-1-5-20-34&quot; class=&quot;headerlink&quot; title=&quot;2019/1/5 20:34&quot;&gt;&lt;/a&gt;&lt;strong&gt;2019/1/5 20:34&lt;/strong&gt;&lt;/h3&gt;&lt;h5 id=&quot;
      
    
    </summary>
    
      <category term="存档" scheme="http://yoursite.com/categories/%E5%AD%98%E6%A1%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>latex-Greek</title>
    <link href="http://yoursite.com/2018/12/06/latex-Greek/"/>
    <id>http://yoursite.com/2018/12/06/latex-Greek/</id>
    <published>2018-12-06T10:14:37.000Z</published>
    <updated>2018-12-06T10:19:52.188Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.zizi.world/pic/latex-Greek.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://www.zizi.world/pic/latex-Greek.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="存档" scheme="http://yoursite.com/categories/%E5%AD%98%E6%A1%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>th12buff原理</title>
    <link href="http://yoursite.com/2018/11/27/th12buff%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/11/27/th12buff原理/</id>
    <published>2018-11-27T05:41:27.000Z</published>
    <updated>2018-12-02T07:52:48.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-25倍弹速"><a href="#1-1-25倍弹速" class="headerlink" title="1. 1.25倍弹速"></a>1. 1.25倍弹速</h1><p>首先找到ins505所在的内存区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">00418068   &gt; \33C9          xor ecx,ecx ;  Case 1F9 of switch 00415525</span><br><span class="line">0041806A   .  8BC3          mov eax,ebx</span><br><span class="line">0041806C   .  E8 8F280000   call th12.0041A900</span><br><span class="line">00418071   .  69C0 14020000 imul eax,eax,0x214</span><br><span class="line">00418077   .  8B93 4C170000 mov edx,dword ptr ds：[ebx+0x174C]</span><br><span class="line">0041807D   .  8D3418        lea esi,dword ptr ds:[eax+ebx]</span><br><span class="line">00418080   .  8B42 04       mov eax,dword ptr ds:[edx+0x4]</span><br><span class="line">00418083   .  B9 01000000   mov ecx,0x1</span><br><span class="line">00418088   .  E8 330E0500   call th12.00468EC0</span><br><span class="line">0041808D   .  B9 02000000   mov ecx,0x2</span><br><span class="line">00418092   .  D99E A4040000 fstp dword ptr ds:[esi+0x4A4]</span><br><span class="line">00418098   .  8B9B 4C170000 mov ebx,dword ptr ds:[ebx+0x174C]</span><br><span class="line">0041809E   .  8B43 04       mov eax,dword ptr ds:[ebx+0x4]</span><br><span class="line">004180A1   .  E8 1A0E0500   call th12.00468EC0</span><br><span class="line">004180A6   .  D99E A8040000 fstp dword ptr ds:[esi+0x4A8]</span><br><span class="line">004180AC   .  E9 7A150000   jmp th12.0041962B</span><br></pre></td></tr></table></figure><p>可以很明显看出，0x418092处的代码中，ds:[esi+0x4A4]就是存储弹幕速度的参数之一，0x4180A6同理，因此，乘以1.25就应该作如下处理：新开辟一块代码块，然后写上我们的代码<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00497</span>AD5      <span class="number">50</span>            push eax</span><br><span class="line"><span class="number">00497</span>AD6      B8 <span class="number">0000</span>A03F   mov eax,<span class="number">0x3FA00000</span>                   ;  浮点数<span class="number">1.25</span></span><br><span class="line"><span class="number">00497</span>ADB      <span class="number">50</span>            push eax</span><br><span class="line"><span class="number">00497</span>ADC      D80C24        fmul dword ptr ss:[esp]</span><br><span class="line"><span class="number">00497</span>ADF      D99E A4040000 fstp dword ptr ds:[esi+<span class="number">0x4A4</span>]</span><br><span class="line"><span class="number">00497</span>AE5      <span class="number">58</span>            pop eax                             </span><br><span class="line"><span class="number">00497</span>AE6      <span class="number">58</span>            pop eax                     </span><br><span class="line"><span class="number">00497</span>AE7    ^ E9 AC05F8FF   jmp th12<span class="number">.00418098</span></span><br><span class="line"><span class="number">00497</span>AEC      <span class="number">50</span>            push eax</span><br><span class="line"><span class="number">00497</span>AED      B8 <span class="number">0000</span>A03F   mov eax,<span class="number">0x3FA00000</span></span><br><span class="line"><span class="number">00497</span>AF2      <span class="number">50</span>            push eax</span><br><span class="line"><span class="number">00497</span>AF3      D80C24        fmul dword ptr ss:[esp]</span><br><span class="line"><span class="number">00497</span>AF6      D99E A8040000 fstp dword ptr ds:[esi+<span class="number">0x4A8</span>]</span><br><span class="line"><span class="number">00497</span>AFC      <span class="number">58</span>            pop eax                             </span><br><span class="line"><span class="number">00497</span>AFD      <span class="number">58</span>            pop eax                               </span><br><span class="line"><span class="number">00497</span>AFE    ^ E9 A905F8FF   jmp th12<span class="number">.004180</span>AC</span><br></pre></td></tr></table></figure></p><p>原来的则变成了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00418092</span>     /E9 <span class="number">3</span>EFA0700   jmp th12<span class="number">.00497</span>AD5</span><br><span class="line"><span class="number">00418097</span>     |<span class="number">90</span>            nop</span><br><span class="line"><span class="number">00418098</span>   . |<span class="number">8B</span>9B <span class="number">4</span>C170000 mov ebx,dword ptr ds:[ebx+<span class="number">0x174C</span>]</span><br><span class="line"><span class="number">0041809</span>E   . |<span class="number">8B</span>43 <span class="number">04</span>       mov eax,dword ptr ds:[ebx+<span class="number">0x4</span>]</span><br><span class="line"><span class="number">004180</span>A1   . |E8 <span class="number">1</span>A0E0500   call th12<span class="number">.00468</span>EC0</span><br><span class="line"><span class="number">004180</span>A6     |E9 <span class="number">41F</span>A0700   jmp th12<span class="number">.00497</span>AEA</span><br><span class="line"><span class="number">004180</span>AB     |<span class="number">90</span>            nop</span><br></pre></td></tr></table></figure></p><h4 id="注意：ins521有相同功能，需要同时改"><a href="#注意：ins521有相同功能，需要同时改" class="headerlink" title="注意：ins521有相同功能，需要同时改"></a>注意：ins521有相同功能，需要同时改</h4><hr><h1 id="2-残机-1和bomb-1"><a href="#2-残机-1和bomb-1" class="headerlink" title="2. 残机+1和bomb+1"></a>2. 残机+1和bomb+1</h1><p>通过ce我们可以找到残机储存地址为0x4B0C98，bomb储存地址为0x4B0CA0，于是我们先取出来然后加1就可以了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_player</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">hSnapshot = OpenProcess(PROCESS_ALL_ACCESS, <span class="literal">false</span>, (DWORD)pe.th32ProcessID);</span><br><span class="line"><span class="keyword">int</span> player;</span><br><span class="line">ReadProcessMemory(hSnapshot, (LPVOID)<span class="number">0x004B0C98</span>, &amp;player, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">player++;</span><br><span class="line">WriteProcessMemory(hSnapshot, (LPVOID)<span class="number">0x004B0C98</span>, &amp;player, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_bomb</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">hSnapshot = OpenProcess(PROCESS_ALL_ACCESS, <span class="literal">false</span>, (DWORD)pe.th32ProcessID);</span><br><span class="line"><span class="keyword">int</span> bomb = <span class="number">0</span>;</span><br><span class="line">ReadProcessMemory(hSnapshot, (LPVOID)<span class="number">0x004B0CA0</span>, &amp;bomb, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">bomb++;</span><br><span class="line">WriteProcessMemory(hSnapshot, (LPVOID)<span class="number">0x004B0CA0</span>, &amp;bomb, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="3-miss不会损失power"><a href="#3-miss不会损失power" class="headerlink" title="3. miss不会损失power"></a>3. miss不会损失power</h1><p>通过ce我们可以找到power存储在0x40BC48，通过ce的跟踪功能我们故意miss一次就可以得到miss掉p的函数所在<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00439440</span>  /$  A1 <span class="number">480</span>C4B00   mov eax,dword ptr ds:[<span class="number">0x4B0C48</span>]</span><br><span class="line"><span class="number">00439445</span>  |.  <span class="number">2B</span>4424 <span class="number">04</span>     sub eax,dword ptr ss:[esp+<span class="number">0x4</span>]</span><br><span class="line"><span class="number">00439449</span>  |.  <span class="number">8B</span>0D D40C4B00 mov ecx,dword ptr ds:[<span class="number">0x4B0CD4</span>]</span><br><span class="line"><span class="number">0043944F</span>  |.  <span class="number">3B</span>C1          cmp eax,ecx                             </span><br><span class="line"><span class="number">00439451</span>  |.  A3 <span class="number">480</span>C4B00   mov dword ptr ds:[<span class="number">0x4B0C48</span>],eax</span><br><span class="line"><span class="number">00439456</span>  |.  <span class="number">7</span>D <span class="number">06</span>         jge <span class="keyword">short</span> th12<span class="number">.0043945</span>E</span><br><span class="line"><span class="number">00439458</span>  |.  <span class="number">890</span>D <span class="number">480</span>C4B00 mov dword ptr ds:[<span class="number">0x4B0C48</span>],ecx         </span><br><span class="line"><span class="number">0043945</span>E  |&gt;  <span class="number">33</span>C0          xor eax,eax</span><br><span class="line"><span class="number">00439460</span>  \.  C2 <span class="number">0400</span>       retn <span class="number">0x4</span></span><br></pre></td></tr></table></figure></p><p>把0x439445处nop掉就可以了</p><hr><h1 id="4-可续关"><a href="#4-可续关" class="headerlink" title="4.可续关"></a>4.可续关</h1><p>首先我们可以看到，miss处的汇编为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">004381E0  /$  51            push ecx                               </span><br><span class="line">004381E1  |.  53            push ebx</span><br><span class="line">004381E2  |.  BB 01000000   mov ebx,0x1</span><br><span class="line">004381E7      291D 980C4B00 sub dword ptr ds:[0x4B0C98],ebx</span><br><span class="line">004381ED  |.  55            push ebp</span><br><span class="line">004381EE  |.  57            push edi                              </span><br><span class="line">004381EF  |.  78 19         js short th12.0043820A</span><br><span class="line">004381F1  |.  A1 9C0C4B00   mov eax,dword ptr ds:[0x4B0C9C]</span><br><span class="line">004381F6  |.  8B0D 980C4B00 mov ecx,dword ptr ds:[0x4B0C98]</span><br><span class="line">004381FC  |.  8B15 E4434B00 mov edx,dword ptr ds:[0x4B43E4]</span><br><span class="line">00438202  |.  50            push eax</span><br><span class="line">00438203  |.  51            push ecx                               </span><br><span class="line">00438204  |.  52            push edx                           </span><br><span class="line">00438205  |.  E8 564CFEFF   call th12.0041CE60</span><br></pre></td></tr></table></figure></p><p>可以看出，miss后残机减1，然后可以推出0x4381F1~0x438205处是用来更新屏幕上的player显示数目的。我们顺便可以看到扔雷函数中也有一处更新bomb数的汇编<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">00422F20  /$  A1 A00C4B00   mov eax,dword ptr ds:[0x4B0CA0]</span><br><span class="line">00422F25  |.  83E8 01       sub eax,0x1</span><br><span class="line">00422F28  |.  A3 A00C4B00   mov dword ptr ds:[0x4B0CA0],eax</span><br><span class="line">00422F2D  |.  79 04         jns short th12.00422F33</span><br><span class="line">00422F2F  |.  33C0          xor eax,eax</span><br><span class="line">00422F31  |.  EB 0A         jmp short th12.00422F3D</span><br><span class="line">00422F33  |&gt;  83F8 08       cmp eax,0x8</span><br><span class="line">00422F36  |.  7E 0A         jle short th12.00422F42</span><br><span class="line">00422F38  |.  B8 08000000   mov eax,0x8</span><br><span class="line">00422F3D  |&gt;  A3 A00C4B00   mov dword ptr ds:[0x4B0CA0],eax</span><br><span class="line">00422F42  |&gt;  8B0D E4434B00 mov ecx,dword ptr ds:[0x4B43E4]</span><br><span class="line">00422F48  |.  85C9          test ecx,ecx                          </span><br><span class="line">00422F4A  |.  74 0E         je short th12.00422F5A</span><br><span class="line">00422F4C  |.  8B15 A40C4B00 mov edx,dword ptr ds:[0x4B0CA4]</span><br><span class="line">00422F52  |.  52            push edx                                </span><br><span class="line">00422F53  |.  50            push eax</span><br><span class="line">00422F54  |.  51            push ecx                                 ;</span><br><span class="line">00422F55  |.  E8 E69FFFFF   call th12.0041CF40</span><br><span class="line">00422F5A  \&gt;  C3            retn</span><br></pre></td></tr></table></figure></p><p>可以以后用来借鉴，于是，我们可以这么改<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00497B</span>34      <span class="number">833</span>D <span class="number">980</span>C4B00 cmp dword ptr ds:[<span class="number">0x4B0C98</span>],<span class="number">0x0</span>          ;  比较残机是否为<span class="number">0</span></span><br><span class="line"><span class="number">00497B</span>3B      <span class="number">75</span> <span class="number">55</span>         jnz <span class="keyword">short</span> th12b<span class="number">.00497B</span>92</span><br><span class="line"><span class="number">00497B</span>3D      C705 <span class="number">980</span>C4B00 mov dword ptr ds:[<span class="number">0x4B0C98</span>],<span class="number">0x3</span></span><br><span class="line"><span class="number">00497B</span>47      C705 A00C4B00 mov dword ptr ds:[<span class="number">0x4B0CA0</span>],<span class="number">0x2</span></span><br><span class="line"><span class="number">00497B</span>51      <span class="number">50</span>            push eax</span><br><span class="line"><span class="number">00497B</span>52      <span class="number">51</span>            push ecx                                 ;  </span><br><span class="line"><span class="number">00497B</span>53      <span class="number">52</span>            push edx                                 ;  </span><br><span class="line"><span class="number">00497B</span>54      B8 <span class="number">02000000</span>   mov eax,<span class="number">0x2</span></span><br><span class="line"><span class="number">00497B</span>59      <span class="number">8B</span>0D E4434B00 mov ecx,dword ptr ds:[<span class="number">0x4B43E4</span>]</span><br><span class="line"><span class="number">00497B</span>5F      <span class="number">8B</span>15 A40C4B00 mov edx,dword ptr ds:[<span class="number">0x4B0CA4</span>]</span><br><span class="line"><span class="number">00497B</span>65      <span class="number">52</span>            push edx                                 ;  </span><br><span class="line"><span class="number">00497B</span>66      <span class="number">50</span>            push eax</span><br><span class="line"><span class="number">00497B</span>67      <span class="number">51</span>            push ecx                                 ;  </span><br><span class="line"><span class="number">00497B</span>68      E8 D353F8FF   call th12b<span class="number">.0041</span>CF40                      ;  更新bomb渲染</span><br><span class="line"><span class="number">00497B</span>6D      <span class="number">5</span>A            pop edx                                  ;  </span><br><span class="line"><span class="number">00497B</span>6E      <span class="number">59</span>            pop ecx                                  ;  </span><br><span class="line"><span class="number">00497B</span>6F      <span class="number">58</span>            pop eax                                  ;  </span><br><span class="line"><span class="number">00497B</span>70      <span class="number">813</span>D <span class="number">480</span>C4B00 cmp dword ptr ds:[<span class="number">0x4B0C48</span>],<span class="number">0xC8</span></span><br><span class="line"><span class="number">00497B</span>7A      <span class="number">73</span> <span class="number">0</span>C         jnb <span class="keyword">short</span> th12b<span class="number">.00497B</span>88</span><br><span class="line"><span class="number">00497B</span>7C      C705 <span class="number">480</span>C4B00 mov dword ptr ds:[<span class="number">0x4B0C48</span>],<span class="number">0x190</span></span><br><span class="line"><span class="number">00497B</span>86      EB <span class="number">0</span>A         jmp <span class="keyword">short</span> th12b<span class="number">.00497B</span>92</span><br><span class="line"><span class="number">00497B</span>88      C705 <span class="number">980</span>C4B00 mov dword ptr ds:[<span class="number">0x4B0C98</span>],<span class="number">0x1F4</span>        ;  power置成<span class="number">500</span></span><br><span class="line"><span class="number">00497B</span>92      <span class="number">291</span>D <span class="number">980</span>C4B00 sub dword ptr ds:[<span class="number">0x4B0C98</span>],ebx</span><br><span class="line"><span class="number">00497B</span>98    ^ E9 <span class="number">5006F</span>AFF   jmp th12b<span class="number">.004381</span>ED</span><br></pre></td></tr></table></figure></p><p>原来的地方就会跳转到这里<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">004381E7</span>   . /E9 <span class="number">48F</span>90500   jmp th12b<span class="number">.00497B</span>34</span><br><span class="line"><span class="number">004381</span>EC     |<span class="number">90</span>            nop</span><br></pre></td></tr></table></figure></p><hr><h1 id="5-上下左右键封印"><a href="#5-上下左右键封印" class="headerlink" title="5. 上下左右键封印"></a>5. 上下左右键封印</h1><p>只需要挂个钩子就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntHook1 = <span class="number">1</span>, cntHook2 = <span class="number">1</span>;</span><br><span class="line">HHOOK KeyHook1, KeyHook2;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">KeyProc1</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nCode != HC_ACTION) </span><br><span class="line"><span class="keyword">return</span> CallNextHookEx(KeyHook1, nCode, wParam, lParam);</span><br><span class="line">PKBDLLHOOKSTRUCT LowKey = <span class="literal">NULL</span>;</span><br><span class="line">LowKey = (PKBDLLHOOKSTRUCT)lParam;</span><br><span class="line"><span class="keyword">if</span> (LowKey-&gt;vkCode == VK_UP)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (LowKey-&gt;vkCode == VK_DOWN)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> CallNextHookEx(KeyHook1, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">KeyProc2</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nCode != HC_ACTION)</span><br><span class="line"><span class="keyword">return</span> CallNextHookEx(KeyHook2, nCode, wParam, lParam);</span><br><span class="line">PKBDLLHOOKSTRUCT LowKey = <span class="literal">NULL</span>;</span><br><span class="line">LowKey = (PKBDLLHOOKSTRUCT)lParam;</span><br><span class="line"><span class="keyword">if</span> (LowKey-&gt;vkCode == VK_LEFT)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (LowKey-&gt;vkCode == VK_RIGHT)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> CallNextHookEx(KeyHook2, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHook1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!cntHook1)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cntHook1 = <span class="number">0</span>;</span><br><span class="line">KeyHook1 = SetWindowsHookEx(WH_KEYBOARD_LL, KeyProc1, GetModuleHandle(<span class="literal">NULL</span>), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHook2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!cntHook2)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cntHook2 = <span class="number">0</span>;</span><br><span class="line">KeyHook2 = SetWindowsHookEx(WH_KEYBOARD_LL, KeyProc2, GetModuleHandle(<span class="literal">NULL</span>), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unHook1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cntHook1)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cntHook1 = <span class="number">1</span>;</span><br><span class="line">UnhookWindowsHookEx(KeyHook1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unHook2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cntHook2)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cntHook2 = <span class="number">1</span>;</span><br><span class="line">UnhookWindowsHookEx(KeyHook2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="6-修改data文件夹"><a href="#6-修改data文件夹" class="headerlink" title="6. 修改data文件夹"></a>6. 修改data文件夹</h1><p>其实只要修改data文件名就可以了，使用rename函数</p><blockquote><p>rename(“data”, “data_b”);<br>rename(“databr”, “data”);</p></blockquote><p>配合<a href="https://github.com/xfgryujk/THResHack" target="_blank" rel="noopener">神器</a>就可以方便改游戏读取内容了，上面的代码可以使用完整路径</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-1-25倍弹速&quot;&gt;&lt;a href=&quot;#1-1-25倍弹速&quot; class=&quot;headerlink&quot; title=&quot;1. 1.25倍弹速&quot;&gt;&lt;/a&gt;1. 1.25倍弹速&lt;/h1&gt;&lt;p&gt;首先找到ins505所在的内存区域&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;00418068   &amp;gt; \33C9          xor ecx,ecx ;  Case 1F9 of switch 00415525&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0041806A   .  8BC3          mov eax,ebx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0041806C   .  E8 8F280000   call th12.0041A900&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00418071   .  69C0 14020000 imul eax,eax,0x214&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00418077   .  8B93 4C170000 mov edx,dword ptr ds：[ebx+0x174C]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0041807D   .  8D3418        lea esi,dword ptr ds:[eax+ebx]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00418080   .  8B42 04       mov eax,dword ptr ds:[edx+0x4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00418083   .  B9 01000000   mov ecx,0x1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00418088   .  E8 330E0500   call th12.00468EC0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0041808D   .  B9 02000000   mov ecx,0x2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00418092   .  D99E A4040000 fstp dword ptr ds:[esi+0x4A4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00418098   .  8B9B 4C170000 mov ebx,dword ptr ds:[ebx+0x174C]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0041809E   .  8B43 04       mov eax,dword ptr ds:[ebx+0x4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;004180A1   .  E8 1A0E0500   call th12.00468EC0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;004180A6   .  D99E A8040000 fstp dword ptr ds:[esi+0x4A8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;004180AC   .  E9 7A150000   jmp th12.0041962B&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以很明显看出，0x418092处的代码中，ds:[esi+0x4A4]就是存储弹幕速度的参数之一，0x4180A6同理，因此，乘以1.25就应该作如下处理：新开辟一块代码块，然后写上我们的代码&lt;br&gt;
    
    </summary>
    
      <category term="东方Project" scheme="http://yoursite.com/categories/%E4%B8%9C%E6%96%B9Project/"/>
    
    
  </entry>
  
  <entry>
    <title>base64加密算法</title>
    <link href="http://yoursite.com/2018/11/14/base64%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/14/base64加密算法/</id>
    <published>2018-11-14T14:38:23.000Z</published>
    <updated>2018-11-14T15:49:42.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-处理数据"><a href="#1-处理数据" class="headerlink" title="1. 处理数据"></a>1. 处理数据</h1><p>众所周知，一个字节有8位，假设信息有n个字节，我们这么处理：将其6个字节一组，分成(n × 8) ÷ 6个组合，比如，”abc”本来的信息组合为 01100001 01100010 01100011，我们可以分成 011000 010110 001001 100011四组，每一组可以得到一个0~63的数，如”abc”得到的数为 24 22 9 35，每一个数对应一个符号，如24对应’Y’，最终连起来得到的符号串就为此字符串的base64编码，“abc”就为”YWJj”。对应表如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> base[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>,</span><br><span class="line">    <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>,</span><br><span class="line">    <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>,</span><br><span class="line">    <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">    <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>,</span><br><span class="line">    <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>,</span><br><span class="line">    <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>,</span><br><span class="line">    <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'/'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="2-特殊情况"><a href="#2-特殊情况" class="headerlink" title="2. 特殊情况"></a>2. 特殊情况</h1><p>我们每次分3个字节一组处理，得到4位编码，有时候我们的字符串的字符数如果模3等于1，则需要末尾填补4位0使其位数为6的倍数(剩余1个字节有8位，填补4位就是12位)，同时在处理后的信息末尾加上”==”，以让编码长度为4的倍数，同理，如果我们的字符串的字符数如果模3等于2，则需要在末尾填补2个0，同时在编码后补上”=”(这里的”=”是用于补全的字符)。比如”deqwewqe”有8个字符，故需要补1个0，再在编码结尾加一个”=”，最后的编码就是”ZGVxd2V3cWU=”。</p><h1 id="3-实现代码"><a href="#3-实现代码" class="headerlink" title="3. 实现代码"></a>3. 实现代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> base[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>,</span><br><span class="line">    <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>,</span><br><span class="line">    <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>,</span><br><span class="line">    <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">    <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>,</span><br><span class="line">    <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>,</span><br><span class="line">    <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>,</span><br><span class="line">    <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'/'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> input[<span class="number">1000000</span>], temp[<span class="number">1000000</span>], output[<span class="number">1000000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len, flag = <span class="number">0</span>, len_ft, len_fo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Read in */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_in</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">"test.txt"</span>, <span class="string">"rb"</span>);</span><br><span class="line">    <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="keyword">sizeof</span>(input));</span><br><span class="line">    <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line">    <span class="built_in">memset</span>(output, <span class="number">0</span>, <span class="keyword">sizeof</span>(output));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(feof(fp))</span><br><span class="line">        &#123;</span><br><span class="line">            len = i - <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n%d\n"</span>, input, len);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        input[i] = fgetc(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Message to bit */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">(<span class="keyword">char</span> *in, <span class="keyword">int</span> *out, <span class="keyword">int</span> s_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s_len; i++)</span><br><span class="line">        out[i] = (in[i / <span class="number">8</span>] &gt;&gt; (<span class="number">7</span> - i + (i / <span class="number">8</span>) * <span class="number">8</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Generate base64 code */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">base64_gen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    len_ft = <span class="number">0</span>, len_fo = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(len % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">        flag = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(len % <span class="number">3</span> == <span class="number">2</span>)</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> out[<span class="number">24</span>];</span><br><span class="line">        trans(&amp;(input[i * <span class="number">3</span>]), out, <span class="number">24</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">24</span>; k++)</span><br><span class="line">            temp[len_ft++] = out[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> out[<span class="number">16</span>];</span><br><span class="line">        trans(&amp;(input[len - <span class="number">2</span>]), out, <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">            temp[len_ft++] = out[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">            temp[len_ft++] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> out[<span class="number">8</span>];</span><br><span class="line">        trans(&amp;(input[len - <span class="number">1</span>]), out, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            temp[len_ft++] = out[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            temp[len_ft++] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (len_ft / <span class="number">6</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) </span><br><span class="line">            t += (temp[i * <span class="number">6</span> + j] &lt;&lt; (<span class="number">5</span> - j));   </span><br><span class="line">        output[i] = base[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, len_ft);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len_ft; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, temp[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!flag)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, output);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s%c\n"</span>, output, <span class="string">'='</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s%s\n"</span>, output, <span class="string">"=="</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read_in();</span><br><span class="line">    base64_gen();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意此代码并不完善，最大信息量应不超过122KB，有需求可自行改进。一般来讲，base64编码的长度约为原来的 8/6。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-处理数据&quot;&gt;&lt;a href=&quot;#1-处理数据&quot; class=&quot;headerlink&quot; title=&quot;1. 处理数据&quot;&gt;&lt;/a&gt;1. 处理数据&lt;/h1&gt;&lt;p&gt;众所周知，一个字节有8位，假设信息有n个字节，我们这么处理：将其6个字节一组，分成(n × 8) ÷ 6个组合，比如，”abc”本来的信息组合为 01100001 01100010 01100011，我们可以分成 011000 010110 001001 100011四组，每一组可以得到一个0~63的数，如”abc”得到的数为 24 22 9 35，每一个数对应一个符号，如24对应’Y’，最终连起来得到的符号串就为此字符串的base64编码，“abc”就为”YWJj”。对应表如下&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; base[&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;G&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;H&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;I&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;J&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;K&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;L&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;M&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;N&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;P&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Q&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;R&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;S&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;T&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;U&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;V&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;W&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;X&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Y&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;g&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;i&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;j&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;k&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;n&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;o&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;p&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;q&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;s&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;t&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;u&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;v&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="加密算法" scheme="http://yoursite.com/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>SHA-256算法</title>
    <link href="http://yoursite.com/2018/11/13/SHA-256%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/13/SHA-256算法/</id>
    <published>2018-11-13T07:54:46.000Z</published>
    <updated>2019-03-09T03:13:19.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据填充"><a href="#1-数据填充" class="headerlink" title="1. 数据填充"></a>1. 数据填充</h1><p>填充消息使数据位数与448模512同余 (n ≡ 448 mod 512)，若数据长度大于512，则以512位一组，直至最后一组长度不足512，若位数小于448，则填充至448位，若大于等于448，则填充448 + 512 - n位。此处的位数指将信息转化为二进制数的位数，如”0”的位数不为1，而是8(bit)。具体填充方法如下：</p><p>以”abc”举例，其二进制码为01100001 01100010 01100110，共24位，填充时，在后面填充1个”1”，接下来全部填充”0”，此时，填充后的二进制码为01100001 01100010 01100110 10000000 … (416个0)，现在的位数已经到了448，最后我们要填充至512位，不要忘了还有长度，”abc”总长度是24位，而24以64位存储，二进制码为 …(56个0)00110000，将其填充至448位码的后面，最后全部填充0。因此，我们最后得到的填充码为01100001 01100010 01100011 10000000  …(416个0) …(56个0) 00111000，变成16进制就是</p><p>0x61626380&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000</p><p>0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000</p><p>0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000018</p><p>若长度大于2^64，则只取低64位进行填充<br><a id="more"></a></p><h1 id="2-数据处理"><a href="#2-数据处理" class="headerlink" title="2. 数据处理"></a>2. 数据处理</h1><h4 id="x数组"><a href="#x数组" class="headerlink" title="x数组"></a>x数组</h4><p>用于循环中混淆数据，共64个，其取法为取前64个质数的立方根的小数部分前32bit，比如x[0] = 0x428A2F98，就是取2的3次根的小数部分前32bit。</p><h4 id="W数组"><a href="#W数组" class="headerlink" title="W数组"></a>W数组</h4><p>也用于循环中混淆数据，前16个由512bit分成的16个32位数生成，第17~64的生成方法如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S0 = S(<span class="number">7</span>, W[i - <span class="number">15</span>]) ^ S(<span class="number">18</span>, W[i - <span class="number">15</span>]) ^ (W[i - <span class="number">15</span>] &gt;&gt; <span class="number">3</span>);</span><br><span class="line">S1 = S(<span class="number">17</span>, W[i - <span class="number">2</span>]) ^ S(<span class="number">19</span>, W[i - <span class="number">2</span>]) ^ (W[i - <span class="number">2</span>] &gt;&gt; <span class="number">10</span>);</span><br><span class="line">W[i] = W[i - <span class="number">16</span>] + S0 + W[i - <span class="number">7</span>] + S1;</span><br></pre></td></tr></table></figure></p><p>其中S(n, x)指x循环右移n位，&gt;&gt; 为位运算右移</p><h4 id="初始值与计算过程"><a href="#初始值与计算过程" class="headerlink" title="初始值与计算过程"></a>初始值与计算过程</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H0 0x6A09E667</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H1 0xBB67AE85</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H2 0x3C6EF372</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H3 0xA54FF53A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H4 0x510E527F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H5 0x9B05688C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H6 0x1F83D9AB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H7 0x5BE0CD19</span></span><br></pre></td></tr></table></figure><p>将H0、H1、H2、H3、H4、H5、H6、H7的副本a、b、c、d、e、f、g、h经过64轮变换之后，再加上H0、H1、H2、H3、H4、H5、H6、H7，生成的数或参加下一组512bit的运算，或直接输出。最终的8个32位数的级联就是此次输入信息的SHA-256值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H0 0x6A09E667</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H1 0xBB67AE85</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H2 0x3C6EF372</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H3 0xA54FF53A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H4 0x510E527F</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H5 0x9B05688C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H6 0x1F83D9AB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H7 0x5BE0CD19</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(n, x) (((x) <span class="meta-string">&lt;&lt; (32 - (n))) | ((x) &gt;&gt; (n))) /* Right-rotate */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> k[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x428A2F98</span>, <span class="number">0x71374491</span>, <span class="number">0xB5C0FBCF</span>, <span class="number">0xE9B5DBA5</span>, <span class="number">0x3956C25B</span>, <span class="number">0x59F111F1</span>, <span class="number">0x923F82A4</span>, <span class="number">0xAB1C5ED5</span>,      </span><br><span class="line">    <span class="number">0xD807AA98</span>, <span class="number">0x12835B01</span>, <span class="number">0x243185BE</span>, <span class="number">0x550C7DC3</span>, <span class="number">0x72BE5D74</span>, <span class="number">0x80DEB1FE</span>, <span class="number">0x9BDC06A7</span>, <span class="number">0xC19BF174</span>,        </span><br><span class="line">    <span class="number">0xE49B69C1</span>, <span class="number">0xEFBE4786</span>, <span class="number">0x0FC19DC6</span>, <span class="number">0x240CA1CC</span>, <span class="number">0x2DE92C6F</span>, <span class="number">0x4A7484AA</span>, <span class="number">0x5CB0A9DC</span>, <span class="number">0x76F988DA</span>,        </span><br><span class="line">    <span class="number">0x983E5152</span>, <span class="number">0xA831C66D</span>, <span class="number">0xB00327C8</span>, <span class="number">0xBF597FC7</span>, <span class="number">0xC6E00BF3</span>, <span class="number">0xD5A79147</span>, <span class="number">0x06CA6351</span>, <span class="number">0x14292967</span>,        </span><br><span class="line">    <span class="number">0x27B70A85</span>, <span class="number">0x2E1B2138</span>, <span class="number">0x4D2C6DFC</span>, <span class="number">0x53380D13</span>, <span class="number">0x650A7354</span>, <span class="number">0x766A0ABB</span>, <span class="number">0x81C2C92E</span>, <span class="number">0x92722C85</span>,        </span><br><span class="line">    <span class="number">0xA2BFE8A1</span>, <span class="number">0xA81A664B</span>, <span class="number">0xC24B8B70</span>, <span class="number">0xC76C51A3</span>, <span class="number">0xD192E819</span>, <span class="number">0xD6990624</span>, <span class="number">0xF40E3585</span>, <span class="number">0x106AA070</span>,       </span><br><span class="line">    <span class="number">0x19A4C116</span>, <span class="number">0x1E376C08</span>, <span class="number">0x2748774C</span>, <span class="number">0x34B0BCB5</span>, <span class="number">0x391C0CB3</span>, <span class="number">0x4ED8AA4A</span>, <span class="number">0x5B9CCA4F</span>, <span class="number">0x682E6FF3</span>,        </span><br><span class="line">    <span class="number">0x748F82EE</span>, <span class="number">0x78A5636F</span>, <span class="number">0x84C87814</span>, <span class="number">0x8CC70208</span>, <span class="number">0x90BEFFFA</span>, <span class="number">0xA4506CEB</span>, <span class="number">0xBEF9A3F7</span>, <span class="number">0xC67178F2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> W[<span class="number">80</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> AA = H0, BB = H1, CC = H2, DD = H3, EE = H4, FF = H5, GG = H6, HH = H7;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Input to binary */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m_convert_to_binary</span><span class="params">(<span class="keyword">char</span> *input, <span class="keyword">long</span> <span class="keyword">long</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i * <span class="number">8</span>; j &lt; i * <span class="number">8</span> + <span class="number">8</span>; j++)</span><br><span class="line">            output[j] = (input[i] &gt;&gt; (<span class="number">7</span> - j % <span class="number">8</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Num to binary */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">n_convert_to_binary</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> num, <span class="keyword">unsigned</span> <span class="keyword">int</span> *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        output[i] = (num &gt;&gt; (<span class="number">63</span> - i)) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Fill to 512-code */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">448</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        output[len] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len + <span class="number">1</span>; i &lt; <span class="number">448</span>; i++)</span><br><span class="line">            output[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> num_len[<span class="number">64</span>];</span><br><span class="line">    n_convert_to_binary(len, num_len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">448</span>; i &lt; <span class="number">512</span>; i++)</span><br><span class="line">        output[i] = num_len[i - <span class="number">448</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Calculate W[i] */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">cal_base</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *output, <span class="keyword">int</span> group)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> A = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = group * <span class="number">32</span>; i &lt; group * <span class="number">32</span> + <span class="number">32</span>; i++)</span><br><span class="line">        A += (output[i] &lt;&lt; (<span class="number">31</span> - (i - group * <span class="number">32</span>)));</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Generate SHA-256 value of input */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SHA256_gen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">16</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> S0 = S(<span class="number">7</span>, W[i - <span class="number">15</span>]) ^ S(<span class="number">18</span>, W[i - <span class="number">15</span>]) ^ (W[i - <span class="number">15</span>] &gt;&gt; <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> S1 = S(<span class="number">17</span>, W[i - <span class="number">2</span>]) ^ S(<span class="number">19</span>, W[i - <span class="number">2</span>]) ^ (W[i - <span class="number">2</span>] &gt;&gt; <span class="number">10</span>);</span><br><span class="line">        W[i] = W[i - <span class="number">16</span>] + S0 + W[i - <span class="number">7</span>] + S1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a = AA, b = BB, c = CC, d = DD, e = EE, f = FF, g = GG, h = HH;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> S0 = S(<span class="number">2</span>, a) ^ S(<span class="number">13</span>, a) ^ S(<span class="number">22</span>, a);</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> MAJ = (a &amp; b) ^ (a &amp; c) ^ (b &amp; c);</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> T2 = S0 + MAJ;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> S1 = S(<span class="number">6</span>, e) ^ S(<span class="number">11</span>, e) ^ S(<span class="number">25</span>, e);</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> ch = (e &amp; f) ^ ((~e) &amp; g);</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> T1 = h + S1 + ch + k[i] + W[i];</span><br><span class="line">        h = g;</span><br><span class="line">        g = f;</span><br><span class="line">        f = e;</span><br><span class="line">        e = d + T1;</span><br><span class="line">        d = c;</span><br><span class="line">        c = b;</span><br><span class="line">        b = a;</span><br><span class="line">        a = T1 + T2;</span><br><span class="line">    &#125;</span><br><span class="line">    AA += a, BB += b, CC += c, DD += d, EE += e, FF += f, GG += g, HH += h;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> input[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> output[<span class="number">520</span>];</span><br><span class="line">    <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="keyword">sizeof</span>(input));</span><br><span class="line">    <span class="built_in">memset</span>(output, <span class="number">0</span> , <span class="keyword">sizeof</span>(output));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>, input);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> len = <span class="built_in">strlen</span>(input);</span><br><span class="line">    m_convert_to_binary(input, len, output);</span><br><span class="line">    fill(len * <span class="number">8</span>, output);</span><br><span class="line">    <span class="built_in">memset</span>(W, <span class="number">0</span>, <span class="keyword">sizeof</span>(W));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        W[i] = cal_base(output, i);</span><br><span class="line">    SHA256_gen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"SHA256: %08X%08X%08X%08X%08X%08X%08X%08X\n"</span>, AA, BB, CC, DD, EE, FF, GG, HH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例如”abcd”的SHA-256值为：</p><p>88D4266FD4E6338D13B845FCF289579D209C897823B9217DA3E161936F031589</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-数据填充&quot;&gt;&lt;a href=&quot;#1-数据填充&quot; class=&quot;headerlink&quot; title=&quot;1. 数据填充&quot;&gt;&lt;/a&gt;1. 数据填充&lt;/h1&gt;&lt;p&gt;填充消息使数据位数与448模512同余 (n ≡ 448 mod 512)，若数据长度大于512，则以512位一组，直至最后一组长度不足512，若位数小于448，则填充至448位，若大于等于448，则填充448 + 512 - n位。此处的位数指将信息转化为二进制数的位数，如”0”的位数不为1，而是8(bit)。具体填充方法如下：&lt;/p&gt;
&lt;p&gt;以”abc”举例，其二进制码为01100001 01100010 01100110，共24位，填充时，在后面填充1个”1”，接下来全部填充”0”，此时，填充后的二进制码为01100001 01100010 01100110 10000000 … (416个0)，现在的位数已经到了448，最后我们要填充至512位，不要忘了还有长度，”abc”总长度是24位，而24以64位存储，二进制码为 …(56个0)00110000，将其填充至448位码的后面，最后全部填充0。因此，我们最后得到的填充码为01100001 01100010 01100011 10000000  …(416个0) …(56个0) 00111000，变成16进制就是&lt;/p&gt;
&lt;p&gt;0x61626380&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&lt;/p&gt;
&lt;p&gt;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&lt;/p&gt;
&lt;p&gt;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000018&lt;/p&gt;
&lt;p&gt;若长度大于2^64，则只取低64位进行填充&lt;br&gt;
    
    </summary>
    
      <category term="加密算法" scheme="http://yoursite.com/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>SHA1算法</title>
    <link href="http://yoursite.com/2018/11/12/SHA1%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/12/SHA1算法/</id>
    <published>2018-11-12T11:08:27.000Z</published>
    <updated>2019-03-09T03:11:59.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据填充"><a href="#1-数据填充" class="headerlink" title="1. 数据填充"></a>1. 数据填充</h1><p>填充消息使数据位数与448模512同余 (n ≡ 448 mod 512)，若数据长度大于512，则以512位一组，直至最后一组长度不足512，若位数小于448，则填充至448位，若大于等于448，则填充448 + 512 - n位。此处的位数指将信息转化为二进制数的位数，如”0”的位数不为1，而是8(bit)。具体填充方法如下：</p><p>以”abc”举例，其二进制码为01100001 01100010 01100110，共24位，填充时，在后面填充1个”1”，接下来全部填充”0”，此时，填充后的二进制码为01100001 01100010 01100110 10000000 … (416个0)，现在的位数已经到了448，最后我们要填充至512位，不要忘了还有长度，”abc”总长度是24位，而24以64位存储，二进制码为 …(56个0)00110000，将其填充至448位码的后面，最后全部填充0。因此，我们最后得到的填充码为01100001 01100010 01100011 10000000  …(416个0) …(56个0) 00111000，变成16进制就是</p><p>0x61626380&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000</p><p>0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000</p><p>0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000018</p><p>若长度大于2^64，则只取低64位进行填充<br><a id="more"></a></p><h1 id="2-数据处理"><a href="#2-数据处理" class="headerlink" title="2. 数据处理"></a>2. 数据处理</h1><h5 id="1-定义辅助函数"><a href="#1-定义辅助函数" class="headerlink" title="(1). 定义辅助函数"></a>(1). 定义辅助函数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(n, x) (((x) <span class="meta-string">&lt;&lt; n) | ((x) &gt;&gt; (32 - n)))</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F0(x, y, z) ((x &amp; y) | ((~x) &amp; z))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F1(x, y, z) (x ^ y ^ z)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F2(x, y, z) ((x &amp; y) | (x &amp; z) | (y &amp; z)) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F3(x, y, z) (x ^ y ^ z)</span></span><br></pre></td></tr></table></figure><h5 id="2-W数组"><a href="#2-W数组" class="headerlink" title="(2). W数组"></a>(2). W数组</h5><p>前16位由512个字节分成16个32位字得出，后面64个依据下列公式得出<br>W[i] = S(1, W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])</p><h5 id="3-初始值与常量"><a href="#3-初始值与常量" class="headerlink" title="(3). 初始值与常量"></a>(3). 初始值与常量</h5><p>定义如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H0 0x67452301L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H1 0xefcdab89L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H2 0x98badcfeL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H3 0x10325476L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H4 0xc3d2e1f0L</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K0 0x5a827999L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K1 0x6ed9eba1L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K2 0x8f1bbcdcL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K3 0xca62c1d6L</span></span><br></pre></td></tr></table></figure></p><p>将H0、H1、H2、H3、H4的副本a、b、c、d、e经过80轮变换后再与H0、H1、H2、H3、H4相加，得到最终的a、b、c、d、e。其级联就是此信息SHA1的值。代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H0 0x67452301L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H1 0xefcdab89L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H2 0x98badcfeL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H3 0x10325476L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H4 0xc3d2e1f0L</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K0 0x5a827999L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K1 0x6ed9eba1L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K2 0x8f1bbcdcL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K3 0xca62c1d6L</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(n, x) (((x) <span class="meta-string">&lt;&lt; n) | ((x) &gt;&gt; (32 - n)))</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F0(x, y, z) ((x &amp; y) | ((~x) &amp; z))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F1(x, y, z) (x ^ y ^ z)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F2(x, y, z) ((x &amp; y) | (x &amp; z) | (y &amp; z)) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F3(x, y, z) (x ^ y ^ z)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> W[<span class="number">80</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> AA = H0, BB = H1, CC = H2, DD = H3, EE = H4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Input to binary */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m_convert_to_binary</span><span class="params">(<span class="keyword">char</span> *input, <span class="keyword">long</span> <span class="keyword">long</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i * <span class="number">8</span>; j &lt; i * <span class="number">8</span> + <span class="number">8</span>; j++)</span><br><span class="line">            output[j] = (input[i] &gt;&gt; (<span class="number">7</span> - j % <span class="number">8</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Num to binary */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">n_convert_to_binary</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> num, <span class="keyword">unsigned</span> <span class="keyword">int</span> *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        output[i] = (num &gt;&gt; (<span class="number">63</span> - i)) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Fill to 512-code */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">448</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        output[len] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len + <span class="number">1</span>; i &lt; <span class="number">448</span>; i++)</span><br><span class="line">            output[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> num_len[<span class="number">64</span>];</span><br><span class="line">    n_convert_to_binary(len, num_len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">448</span>; i &lt; <span class="number">512</span>; i++)</span><br><span class="line">        output[i] = num_len[i - <span class="number">448</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Calculate W[i] */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">cal_base</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *output, <span class="keyword">int</span> group)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> A = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = group * <span class="number">32</span>; i &lt; group * <span class="number">32</span> + <span class="number">32</span>; i++)</span><br><span class="line">        A += (output[i] &lt;&lt; (<span class="number">31</span> - (i - group * <span class="number">32</span>)));</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Generate SHA1 value of input */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SHA1_gen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">16</span>; i &lt; <span class="number">80</span>; i++)</span><br><span class="line">        W[i] = S(<span class="number">1</span>, W[i - <span class="number">3</span>] ^ W[i - <span class="number">8</span>] ^ W[i - <span class="number">14</span>] ^ W[i - <span class="number">16</span>]);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a = AA, b = BB, c = CC, d = DD, e = EE;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = K0 + F0(b, c, d) + S(<span class="number">5</span>, a) + e + W[i];</span><br><span class="line">        e = d; d = c;</span><br><span class="line">        c = S(<span class="number">30</span>, b);</span><br><span class="line">        b = a; a = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">20</span>; i &lt; <span class="number">40</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = K1 + F1(b, c, d) + S(<span class="number">5</span>, a) + e + W[i];</span><br><span class="line">        e = d; d = c;</span><br><span class="line">        c = S(<span class="number">30</span>, b);</span><br><span class="line">        b = a; a = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">40</span>; i &lt; <span class="number">60</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = K2 + F2(b, c, d) + S(<span class="number">5</span>, a) + e + W[i];</span><br><span class="line">        e = d; d = c;</span><br><span class="line">        c = S(<span class="number">30</span>, b);</span><br><span class="line">        b = a; a = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">60</span>; i &lt; <span class="number">80</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = K3 + F3(b, c, d) + S(<span class="number">5</span>, a) + e + W[i];</span><br><span class="line">        e = d; d = c;</span><br><span class="line">        c = S(<span class="number">30</span>, b);</span><br><span class="line">        b = a; a = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    AA += a, BB += b, CC += c, DD += d, EE += e;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> input[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> output[<span class="number">520</span>];</span><br><span class="line">    <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="keyword">sizeof</span>(input));</span><br><span class="line">    <span class="built_in">memset</span>(output, <span class="number">0</span> , <span class="keyword">sizeof</span>(output));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>, input);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> len = <span class="built_in">strlen</span>(input);</span><br><span class="line">    m_convert_to_binary(input, len, output);</span><br><span class="line">    fill(len * <span class="number">8</span>, output);</span><br><span class="line">    <span class="built_in">memset</span>(W, <span class="number">0</span>, <span class="keyword">sizeof</span>(W));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        W[i] = cal_base(output, i);</span><br><span class="line">    SHA1_gen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"SHA1: %08X%08X%08X%08X%08X\n"</span>, AA, BB, CC, DD, EE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>举例：”abc”的SHA1值为</p><p>A9993E364706816ABA3E25717850C26C9CD0D89D</p><script type="math/tex; mode=display">x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}​</script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-数据填充&quot;&gt;&lt;a href=&quot;#1-数据填充&quot; class=&quot;headerlink&quot; title=&quot;1. 数据填充&quot;&gt;&lt;/a&gt;1. 数据填充&lt;/h1&gt;&lt;p&gt;填充消息使数据位数与448模512同余 (n ≡ 448 mod 512)，若数据长度大于512，则以512位一组，直至最后一组长度不足512，若位数小于448，则填充至448位，若大于等于448，则填充448 + 512 - n位。此处的位数指将信息转化为二进制数的位数，如”0”的位数不为1，而是8(bit)。具体填充方法如下：&lt;/p&gt;
&lt;p&gt;以”abc”举例，其二进制码为01100001 01100010 01100110，共24位，填充时，在后面填充1个”1”，接下来全部填充”0”，此时，填充后的二进制码为01100001 01100010 01100110 10000000 … (416个0)，现在的位数已经到了448，最后我们要填充至512位，不要忘了还有长度，”abc”总长度是24位，而24以64位存储，二进制码为 …(56个0)00110000，将其填充至448位码的后面，最后全部填充0。因此，我们最后得到的填充码为01100001 01100010 01100011 10000000  …(416个0) …(56个0) 00111000，变成16进制就是&lt;/p&gt;
&lt;p&gt;0x61626380&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&lt;/p&gt;
&lt;p&gt;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&lt;/p&gt;
&lt;p&gt;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000018&lt;/p&gt;
&lt;p&gt;若长度大于2^64，则只取低64位进行填充&lt;br&gt;
    
    </summary>
    
      <category term="加密算法" scheme="http://yoursite.com/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>md5算法</title>
    <link href="http://yoursite.com/2018/11/11/md5%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/11/md5算法/</id>
    <published>2018-11-11T09:27:46.000Z</published>
    <updated>2019-03-09T03:10:59.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据填充"><a href="#1-数据填充" class="headerlink" title="1. 数据填充"></a>1. 数据填充</h1><p>填充消息使数据位数与448模512同余 (n ≡ 448 mod 512)，若数据长度大于512，则以512位一组，直至最后一组长度不足512，若位数小于448，则填充至448位，若大于等于448，则填充448 + 512 - n位。此处的位数指将信息转化为二进制数的位数，如”0”的位数不为1，而是8(bit)。具体填充方法如下：</p><p>以”how”举例，其二进制码为01101000 01101111 01110111，共24位，填充时，在后面填充1个”1”，接下来全部填充”0”，此时，填充后的二进制码为01101000 01101111 01110111 10000000 … (416个0)，现在的位数已经到了448，最后我们要填充至512位，不要忘了还有长度，”how”总长度是24位，24的二进制码为 00110000，将其填充至448位码的后面，最后全部填充0。因此，我们最后得到的填充码为01101000 01101111 01110111 10000000  …(416个0) 00111000 …(56个0)，变成16进制就是</p><p>0x86776F68&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000</p><p>0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000&nbsp;0x00000000</p><p>0x00000000&nbsp;0x00000000&nbsp;0x00000018&nbsp;0x00000000</p><p>若长度大于2^64，则只取低64位进行填充<br><a id="more"></a></p><h1 id="2-初始化变量"><a href="#2-初始化变量" class="headerlink" title="2. 初始化变量"></a>2. 初始化变量</h1><p>用四个变量来计算消息摘要</p><p>A = 01234567h &emsp; B = 89ABCDEFh &emsp; C = FEDCBA98h &emsp;D = 76543210h</p><p>不过在内存中是以低字节在前的位置存储的，所以我们要这么写</p><p>A = 0x67452301&emsp;B = 0xEFCDAB89 &emsp;C = 0x98BADCFE &emsp;D = 0x10325476</p><h1 id="3-数据处理"><a href="#3-数据处理" class="headerlink" title="3.数据处理"></a>3.数据处理</h1><p>以512位分组为单位处理消息。首先定义4个辅助函数</p><blockquote><p>F(X,Y,Z) = (X&amp;Y)|((~X)&amp;Z)</p><p>G(X,Y,Z) = (X&amp;Z)|(Y&amp;(~Z))</p><p>H(X,Y,Z) = X^Y^Z</p><p>I(X,Y,Z) = Y^(X|(~Z)) </p></blockquote><p>操作如下</p><p>将A、B、C、D的副本a、b、c、d中的3个经F、G、H、I运算后的结果与第4个相加，再加上1个32位数(512位分成16个32位数)，再加上一个加法常数，并将所得值循环左移若干位，最后再加上a、b、c、d中的某一个，送至A、B、C、D，完成一次循环。所用的加法常数由表T[i]定义，其中T[i] = 4294969276 × abs(sin i)的整数部分，这样做是为了消除变换中的线性。代码如下(目前只考虑长度不超过128的信息)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UINT4;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S11 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S12 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S13 17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S14 22</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S21 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S22 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S23 14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S24 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S31 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S32 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S33 16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S34 23</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S41 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S42 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S43 15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S44 21</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(x, y, z) (((x) &amp; (y)) | ((~x) &amp; (z)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(x, y, z) (((x) &amp; (z)) | ((y) &amp; (~z)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H(x, y, z) ((x) ^ (y) ^ (z))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I(x, y, z) ((y) ^ ((x) | (~z)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROTATE_LEFT(x, n) (((x) <span class="meta-string">&lt;&lt; (n)) | ((x) &gt;&gt; (32-(n))))</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF(a, b, c, d, x, s, ac) &#123; \</span></span><br><span class="line"> (a) += F ((b), (c), (d)) + (x) + (UINT4)(ac); \</span><br><span class="line"> (a) = ROTATE_LEFT ((a), (s)); \</span><br><span class="line"> (a) += (b); \</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GG(a, b, c, d, x, s, ac) &#123; \</span></span><br><span class="line"> (a) += G ((b), (c), (d)) + (x) + (UINT4)(ac); \</span><br><span class="line"> (a) = ROTATE_LEFT ((a), (s)); \</span><br><span class="line"> (a) += (b); \</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HH(a, b, c, d, x, s, ac) &#123; \</span></span><br><span class="line"> (a) += H ((b), (c), (d)) + (x) + (UINT4)(ac); \</span><br><span class="line"> (a) = ROTATE_LEFT ((a), (s)); \</span><br><span class="line"> (a) += (b); \</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> II(a, b, c, d, x, s, ac) &#123; \</span></span><br><span class="line"> (a) += I ((b), (c), (d)) + (x) + (UINT4)(ac); \</span><br><span class="line"> (a) = ROTATE_LEFT ((a), (s)); \</span><br><span class="line"> (a) += (b); \</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">UINT4 x[<span class="number">16</span>];</span><br><span class="line">UINT4 AA = <span class="number">0x67452301</span>;</span><br><span class="line">UINT4 BB = <span class="number">0xefcdab89</span>;</span><br><span class="line">UINT4 CC = <span class="number">0x98badcfe</span>;</span><br><span class="line">UINT4 DD = <span class="number">0x10325476</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* input to binary */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m_convert_to_binary</span><span class="params">(<span class="keyword">char</span> *input, <span class="keyword">long</span> <span class="keyword">long</span> len, <span class="keyword">int</span> *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i * <span class="number">8</span>; j &lt; i * <span class="number">8</span> + <span class="number">8</span>; j++)</span><br><span class="line">            output[j] = (input[i] &gt;&gt; (<span class="number">7</span> - j % <span class="number">8</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Num to binary */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">n_convert_to_binary</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> num, <span class="keyword">int</span> *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        output[i] = (num &gt;&gt; (<span class="number">7</span> - i)) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Fill the 512-code with 0 or 1 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> len, <span class="keyword">int</span> *output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">448</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        output[len] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len + <span class="number">1</span>; i &lt; <span class="number">448</span>; i++)</span><br><span class="line">            output[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num_len[<span class="number">8</span>];</span><br><span class="line">    n_convert_to_binary(len, num_len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">448</span>; i &lt; <span class="number">512</span>; i++)</span><br><span class="line">        output[i] = num_len[i - <span class="number">448</span>] ? i &lt; <span class="number">448</span> + <span class="number">8</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Calculate x[i] by group */</span></span><br><span class="line"><span class="function">UINT4 <span class="title">cal_base</span><span class="params">(<span class="keyword">int</span> *output, <span class="keyword">int</span> group)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UINT4 A = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = group * <span class="number">32</span>; i &lt; group * <span class="number">32</span> + <span class="number">8</span>; i++)</span><br><span class="line">        A += (output[i] &lt;&lt; (<span class="number">7</span> - (i - group * <span class="number">32</span>)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = group * <span class="number">32</span> + <span class="number">8</span>; i &lt; group * <span class="number">32</span> + <span class="number">16</span>; i++)</span><br><span class="line">        A += (output[i] &lt;&lt; (<span class="number">23</span> - (i - group * <span class="number">32</span>)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = group * <span class="number">32</span> + <span class="number">16</span>; i &lt; group * <span class="number">32</span> + <span class="number">24</span>; i++)</span><br><span class="line">        A += (output[i] &lt;&lt; (<span class="number">39</span> - (i - group * <span class="number">32</span>)));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = group * <span class="number">32</span> + <span class="number">24</span>; i &lt; group * <span class="number">32</span> + <span class="number">32</span>; i++)</span><br><span class="line">        A += (output[i] &lt;&lt; (<span class="number">55</span> - (i - group * <span class="number">32</span>)));</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">md5_gen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UINT4 a = AA;</span><br><span class="line">    UINT4 b = BB;</span><br><span class="line">    UINT4 c = CC;</span><br><span class="line">    UINT4 d = DD;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Round 1 */</span></span><br><span class="line">    FF (a, b, c, d, x[ <span class="number">0</span>], S11, <span class="number">0xd76aa478</span>); <span class="comment">/* 1 */</span></span><br><span class="line">    FF (d, a, b, c, x[ <span class="number">1</span>], S12, <span class="number">0xe8c7b756</span>); <span class="comment">/* 2 */</span></span><br><span class="line">    FF (c, d, a, b, x[ <span class="number">2</span>], S13, <span class="number">0x242070db</span>); <span class="comment">/* 3 */</span></span><br><span class="line">    FF (b, c, d, a, x[ <span class="number">3</span>], S14, <span class="number">0xc1bdceee</span>); <span class="comment">/* 4 */</span></span><br><span class="line">    FF (a, b, c, d, x[ <span class="number">4</span>], S11, <span class="number">0xf57c0faf</span>); <span class="comment">/* 5 */</span></span><br><span class="line">    FF (d, a, b, c, x[ <span class="number">5</span>], S12, <span class="number">0x4787c62a</span>); <span class="comment">/* 6 */</span></span><br><span class="line">    FF (c, d, a, b, x[ <span class="number">6</span>], S13, <span class="number">0xa8304613</span>); <span class="comment">/* 7 */</span></span><br><span class="line">    FF (b, c, d, a, x[ <span class="number">7</span>], S14, <span class="number">0xfd469501</span>); <span class="comment">/* 8 */</span></span><br><span class="line">    FF (a, b, c, d, x[ <span class="number">8</span>], S11, <span class="number">0x698098d8</span>); <span class="comment">/* 9 */</span></span><br><span class="line">    FF (d, a, b, c, x[ <span class="number">9</span>], S12, <span class="number">0x8b44f7af</span>); <span class="comment">/* 10 */</span></span><br><span class="line">    FF (c, d, a, b, x[<span class="number">10</span>], S13, <span class="number">0xffff5bb1</span>); <span class="comment">/* 11 */</span></span><br><span class="line">    FF (b, c, d, a, x[<span class="number">11</span>], S14, <span class="number">0x895cd7be</span>); <span class="comment">/* 12 */</span></span><br><span class="line">    FF (a, b, c, d, x[<span class="number">12</span>], S11, <span class="number">0x6b901122</span>); <span class="comment">/* 13 */</span></span><br><span class="line">    FF (d, a, b, c, x[<span class="number">13</span>], S12, <span class="number">0xfd987193</span>); <span class="comment">/* 14 */</span></span><br><span class="line">    FF (c, d, a, b, x[<span class="number">14</span>], S13, <span class="number">0xa679438e</span>); <span class="comment">/* 15 */</span></span><br><span class="line">    FF (b, c, d, a, x[<span class="number">15</span>], S14, <span class="number">0x49b40821</span>); <span class="comment">/* 16 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Round 2 */</span></span><br><span class="line">    GG (a, b, c, d, x[ <span class="number">1</span>], S21, <span class="number">0xf61e2562</span>); <span class="comment">/* 17 */</span></span><br><span class="line">    GG (d, a, b, c, x[ <span class="number">6</span>], S22, <span class="number">0xc040b340</span>); <span class="comment">/* 18 */</span></span><br><span class="line">    GG (c, d, a, b, x[<span class="number">11</span>], S23, <span class="number">0x265e5a51</span>); <span class="comment">/* 19 */</span></span><br><span class="line">    GG (b, c, d, a, x[ <span class="number">0</span>], S24, <span class="number">0xe9b6c7aa</span>); <span class="comment">/* 20 */</span></span><br><span class="line">    GG (a, b, c, d, x[ <span class="number">5</span>], S21, <span class="number">0xd62f105d</span>); <span class="comment">/* 21 */</span></span><br><span class="line">    GG (d, a, b, c, x[<span class="number">10</span>], S22,  <span class="number">0x2441453</span>); <span class="comment">/* 22 */</span></span><br><span class="line">    GG (c, d, a, b, x[<span class="number">15</span>], S23, <span class="number">0xd8a1e681</span>); <span class="comment">/* 23 */</span></span><br><span class="line">    GG (b, c, d, a, x[ <span class="number">4</span>], S24, <span class="number">0xe7d3fbc8</span>); <span class="comment">/* 24 */</span></span><br><span class="line">    GG (a, b, c, d, x[ <span class="number">9</span>], S21, <span class="number">0x21e1cde6</span>); <span class="comment">/* 25 */</span></span><br><span class="line">    GG (d, a, b, c, x[<span class="number">14</span>], S22, <span class="number">0xc33707d6</span>); <span class="comment">/* 26 */</span></span><br><span class="line">    GG (c, d, a, b, x[ <span class="number">3</span>], S23, <span class="number">0xf4d50d87</span>); <span class="comment">/* 27 */</span></span><br><span class="line">    GG (b, c, d, a, x[ <span class="number">8</span>], S24, <span class="number">0x455a14ed</span>); <span class="comment">/* 28 */</span></span><br><span class="line">    GG (a, b, c, d, x[<span class="number">13</span>], S21, <span class="number">0xa9e3e905</span>); <span class="comment">/* 29 */</span></span><br><span class="line">    GG (d, a, b, c, x[ <span class="number">2</span>], S22, <span class="number">0xfcefa3f8</span>); <span class="comment">/* 30 */</span></span><br><span class="line">    GG (c, d, a, b, x[ <span class="number">7</span>], S23, <span class="number">0x676f02d9</span>); <span class="comment">/* 31 */</span></span><br><span class="line">    GG (b, c, d, a, x[<span class="number">12</span>], S24, <span class="number">0x8d2a4c8a</span>); <span class="comment">/* 32 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Round 3 */</span></span><br><span class="line">    HH (a, b, c, d, x[ <span class="number">5</span>], S31, <span class="number">0xfffa3942</span>); <span class="comment">/* 33 */</span></span><br><span class="line">    HH (d, a, b, c, x[ <span class="number">8</span>], S32, <span class="number">0x8771f681</span>); <span class="comment">/* 34 */</span></span><br><span class="line">    HH (c, d, a, b, x[<span class="number">11</span>], S33, <span class="number">0x6d9d6122</span>); <span class="comment">/* 35 */</span></span><br><span class="line">    HH (b, c, d, a, x[<span class="number">14</span>], S34, <span class="number">0xfde5380c</span>); <span class="comment">/* 36 */</span></span><br><span class="line">    HH (a, b, c, d, x[ <span class="number">1</span>], S31, <span class="number">0xa4beea44</span>); <span class="comment">/* 37 */</span></span><br><span class="line">    HH (d, a, b, c, x[ <span class="number">4</span>], S32, <span class="number">0x4bdecfa9</span>); <span class="comment">/* 38 */</span></span><br><span class="line">    HH (c, d, a, b, x[ <span class="number">7</span>], S33, <span class="number">0xf6bb4b60</span>); <span class="comment">/* 39 */</span></span><br><span class="line">    HH (b, c, d, a, x[<span class="number">10</span>], S34, <span class="number">0xbebfbc70</span>); <span class="comment">/* 40 */</span></span><br><span class="line">    HH (a, b, c, d, x[<span class="number">13</span>], S31, <span class="number">0x289b7ec6</span>); <span class="comment">/* 41 */</span></span><br><span class="line">    HH (d, a, b, c, x[ <span class="number">0</span>], S32, <span class="number">0xeaa127fa</span>); <span class="comment">/* 42 */</span></span><br><span class="line">    HH (c, d, a, b, x[ <span class="number">3</span>], S33, <span class="number">0xd4ef3085</span>); <span class="comment">/* 43 */</span></span><br><span class="line">    HH (b, c, d, a, x[ <span class="number">6</span>], S34,  <span class="number">0x4881d05</span>); <span class="comment">/* 44 */</span></span><br><span class="line">    HH (a, b, c, d, x[ <span class="number">9</span>], S31, <span class="number">0xd9d4d039</span>); <span class="comment">/* 45 */</span></span><br><span class="line">    HH (d, a, b, c, x[<span class="number">12</span>], S32, <span class="number">0xe6db99e5</span>); <span class="comment">/* 46 */</span></span><br><span class="line">    HH (c, d, a, b, x[<span class="number">15</span>], S33, <span class="number">0x1fa27cf8</span>); <span class="comment">/* 47 */</span></span><br><span class="line">    HH (b, c, d, a, x[ <span class="number">2</span>], S34, <span class="number">0xc4ac5665</span>); <span class="comment">/* 48 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Round 4 */</span></span><br><span class="line">    II (a, b, c, d, x[ <span class="number">0</span>], S41, <span class="number">0xf4292244</span>); <span class="comment">/* 49 */</span></span><br><span class="line">    II (d, a, b, c, x[ <span class="number">7</span>], S42, <span class="number">0x432aff97</span>); <span class="comment">/* 50 */</span></span><br><span class="line">    II (c, d, a, b, x[<span class="number">14</span>], S43, <span class="number">0xab9423a7</span>); <span class="comment">/* 51 */</span></span><br><span class="line">    II (b, c, d, a, x[ <span class="number">5</span>], S44, <span class="number">0xfc93a039</span>); <span class="comment">/* 52 */</span></span><br><span class="line">    II (a, b, c, d, x[<span class="number">12</span>], S41, <span class="number">0x655b59c3</span>); <span class="comment">/* 53 */</span></span><br><span class="line">    II (d, a, b, c, x[ <span class="number">3</span>], S42, <span class="number">0x8f0ccc92</span>); <span class="comment">/* 54 */</span></span><br><span class="line">    II (c, d, a, b, x[<span class="number">10</span>], S43, <span class="number">0xffeff47d</span>); <span class="comment">/* 55 */</span></span><br><span class="line">    II (b, c, d, a, x[ <span class="number">1</span>], S44, <span class="number">0x85845dd1</span>); <span class="comment">/* 56 */</span></span><br><span class="line">    II (a, b, c, d, x[ <span class="number">8</span>], S41, <span class="number">0x6fa87e4f</span>); <span class="comment">/* 57 */</span></span><br><span class="line">    II (d, a, b, c, x[<span class="number">15</span>], S42, <span class="number">0xfe2ce6e0</span>); <span class="comment">/* 58 */</span></span><br><span class="line">    II (c, d, a, b, x[ <span class="number">6</span>], S43, <span class="number">0xa3014314</span>); <span class="comment">/* 59 */</span></span><br><span class="line">    II (b, c, d, a, x[<span class="number">13</span>], S44, <span class="number">0x4e0811a1</span>); <span class="comment">/* 60 */</span></span><br><span class="line">    II (a, b, c, d, x[ <span class="number">4</span>], S41, <span class="number">0xf7537e82</span>); <span class="comment">/* 61 */</span></span><br><span class="line">    II (d, a, b, c, x[<span class="number">11</span>], S42, <span class="number">0xbd3af235</span>); <span class="comment">/* 62 */</span></span><br><span class="line">    II (c, d, a, b, x[ <span class="number">2</span>], S43, <span class="number">0x2ad7d2bb</span>); <span class="comment">/* 63 */</span></span><br><span class="line">    II (b, c, d, a, x[ <span class="number">9</span>], S44, <span class="number">0xeb86d391</span>); <span class="comment">/* 64 */</span></span><br><span class="line"></span><br><span class="line">    AA += a;</span><br><span class="line">    BB += b;</span><br><span class="line">    CC += c;</span><br><span class="line">    DD += d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Big endian to small endian*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AA = (((AA &amp; <span class="number">0x000000ff</span>) &lt;&lt; <span class="number">24</span>) | ((AA &amp; <span class="number">0x0000ff00</span>) &lt;&lt; <span class="number">8</span>) | ((AA &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">8</span>) | ((AA &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span> ));</span><br><span class="line">    BB = (((BB &amp; <span class="number">0x000000ff</span>) &lt;&lt; <span class="number">24</span>) | ((BB &amp; <span class="number">0x0000ff00</span>) &lt;&lt; <span class="number">8</span>) | ((BB &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">8</span>) | ((BB &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span> ));</span><br><span class="line">    CC = (((CC &amp; <span class="number">0x000000ff</span>) &lt;&lt; <span class="number">24</span>) | ((CC &amp; <span class="number">0x0000ff00</span>) &lt;&lt; <span class="number">8</span>) | ((CC &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">8</span>) | ((CC &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span> ));</span><br><span class="line">    DD = (((DD &amp; <span class="number">0x000000ff</span>) &lt;&lt; <span class="number">24</span>) | ((DD &amp; <span class="number">0x0000ff00</span>) &lt;&lt; <span class="number">8</span>) | ((DD &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">8</span>) | ((DD &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span> ));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"MD5: %08X%08X%08X%08X\n"</span>, AA, BB, CC, DD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> input[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> output[<span class="number">520</span>];</span><br><span class="line">    <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="keyword">sizeof</span>(input));</span><br><span class="line">    <span class="built_in">memset</span>(output, <span class="number">0</span> , <span class="keyword">sizeof</span>(output));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>, input);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> len = <span class="built_in">strlen</span>(input);</span><br><span class="line">    m_convert_to_binary(input, len, output);</span><br><span class="line">    fill(len * <span class="number">8</span>, output);</span><br><span class="line">    <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="keyword">sizeof</span>(x));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        x[i] = cal_base(output, i);</span><br><span class="line">    md5_gen();</span><br><span class="line">    print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如本来的字符串为”how”，计算出来的md5为</p><p>DB88A0257C220DBFDD2E40F6152D6A8D </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-数据填充&quot;&gt;&lt;a href=&quot;#1-数据填充&quot; class=&quot;headerlink&quot; title=&quot;1. 数据填充&quot;&gt;&lt;/a&gt;1. 数据填充&lt;/h1&gt;&lt;p&gt;填充消息使数据位数与448模512同余 (n ≡ 448 mod 512)，若数据长度大于512，则以512位一组，直至最后一组长度不足512，若位数小于448，则填充至448位，若大于等于448，则填充448 + 512 - n位。此处的位数指将信息转化为二进制数的位数，如”0”的位数不为1，而是8(bit)。具体填充方法如下：&lt;/p&gt;
&lt;p&gt;以”how”举例，其二进制码为01101000 01101111 01110111，共24位，填充时，在后面填充1个”1”，接下来全部填充”0”，此时，填充后的二进制码为01101000 01101111 01110111 10000000 … (416个0)，现在的位数已经到了448，最后我们要填充至512位，不要忘了还有长度，”how”总长度是24位，24的二进制码为 00110000，将其填充至448位码的后面，最后全部填充0。因此，我们最后得到的填充码为01101000 01101111 01110111 10000000  …(416个0) 00111000 …(56个0)，变成16进制就是&lt;/p&gt;
&lt;p&gt;0x86776F68&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&lt;/p&gt;
&lt;p&gt;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000000&lt;/p&gt;
&lt;p&gt;0x00000000&amp;nbsp;0x00000000&amp;nbsp;0x00000018&amp;nbsp;0x00000000&lt;/p&gt;
&lt;p&gt;若长度大于2^64，则只取低64位进行填充&lt;br&gt;
    
    </summary>
    
      <category term="加密算法" scheme="http://yoursite.com/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>在hexo上添加一个live2d模型</title>
    <link href="http://yoursite.com/2018/09/22/%E5%9C%A8hexo%E4%B8%8A%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAlive2d%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/09/22/在hexo上添加一个live2d模型/</id>
    <published>2018-09-22T03:52:14.000Z</published>
    <updated>2018-11-13T12:26:46.820Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先在主目录下安装插件"><a href="#首先在主目录下安装插件" class="headerlink" title="首先在主目录下安装插件"></a>首先在主目录下安装插件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><h4 id="然后可以用这条命令下载live2d模型"><a href="#然后可以用这条命令下载live2d模型" class="headerlink" title="然后可以用这条命令下载live2d模型"></a>然后可以用这条命令下载live2d模型</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-z16</span><br></pre></td></tr></table></figure><h4 id="install后面的是模型的名字，可以在这里找到所有的模型示范，找到喜欢的就根据上面的命令，把z16替换成你选择的模型就可以了"><a href="#install后面的是模型的名字，可以在这里找到所有的模型示范，找到喜欢的就根据上面的命令，把z16替换成你选择的模型就可以了" class="headerlink" title="install后面的是模型的名字，可以在这里找到所有的模型示范，找到喜欢的就根据上面的命令，把z16替换成你选择的模型就可以了"></a>install后面的是模型的名字，可以在<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">这里</a>找到所有的模型示范，找到喜欢的就根据上面的命令，把z16替换成你选择的模型就可以了</h4><hr><h4 id="接下来是修改主目录下的-config-yml，在最后添加如下内容"><a href="#接下来是修改主目录下的-config-yml，在最后添加如下内容" class="headerlink" title="接下来是修改主目录下的_config.yml，在最后添加如下内容"></a>接下来是修改主目录下的_config.yml，在最后添加如下内容</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  debug: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-z16</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: <span class="number">150</span></span><br><span class="line">    height: <span class="number">300</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="然后部署到服务器上"><a href="#然后部署到服务器上" class="headerlink" title="然后部署到服务器上"></a>然后部署到服务器上</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4 id="就可以在博客上看到看板娘了"><a href="#就可以在博客上看到看板娘了" class="headerlink" title="就可以在博客上看到看板娘了"></a>就可以在博客上看到看板娘了</h4><h4 id="我的live2d是用原来的某个资源包用药水制作师的相关资源替换得到的，具体方法还有点迷"><a href="#我的live2d是用原来的某个资源包用药水制作师的相关资源替换得到的，具体方法还有点迷" class="headerlink" title="我的live2d是用原来的某个资源包用药水制作师的相关资源替换得到的，具体方法还有点迷"></a>我的live2d是用原来的某个资源包用<a href="http://www.zizi.world/src/live2d/Potion-Maker.zip" target="_blank" rel="noopener">药水制作师</a>的相关资源替换得到的，具体方法还有点迷</h4><h4 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="就大功告成了"><a href="#就大功告成了" class="headerlink" title="就大功告成了"></a>就大功告成了</h4><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;首先在主目录下安装插件&quot;&gt;&lt;a href=&quot;#首先在主目录下安装插件&quot; class=&quot;headerlink&quot; title=&quot;首先在主目录下安装插件&quot;&gt;&lt;/a&gt;首先在主目录下安装插件&lt;/h4&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save hexo-helper-live2d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;然后可以用这条命令下载live2d模型&quot;&gt;&lt;a href=&quot;#然后可以用这条命令下载live2d模型&quot; class=&quot;headerlink&quot; title=&quot;然后可以用这条命令下载live2d模型&quot;&gt;&lt;/a&gt;然后可以用这条命令下载live2d模型&lt;/h4&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install live2d-widget-model-z16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;install后面的是模型的名字，可以在这里找到所有的模型示范，找到喜欢的就根据上面的命令，把z16替换成你选择的模型就可以了&quot;&gt;&lt;a href=&quot;#install后面的是模型的名字，可以在这里找到所有的模型示范，找到喜欢的就根据上面的命令，把z16替换成你选择的模型就可以了&quot; class=&quot;headerlink&quot; title=&quot;install后面的是模型的名字，可以在这里找到所有的模型示范，找到喜欢的就根据上面的命令，把z16替换成你选择的模型就可以了&quot;&gt;&lt;/a&gt;install后面的是模型的名字，可以在&lt;a href=&quot;https://huaji8.top/post/live2d-plugin-2.0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;找到所有的模型示范，找到喜欢的就根据上面的命令，把z16替换成你选择的模型就可以了&lt;/h4&gt;&lt;hr&gt;
&lt;h4 id=&quot;接下来是修改主目录下的-config-yml，在最后添加如下内容&quot;&gt;&lt;a href=&quot;#接下来是修改主目录下的-config-yml，在最后添加如下内容&quot; class=&quot;headerlink&quot; title=&quot;接下来是修改主目录下的_config.yml，在最后添加如下内容&quot;&gt;&lt;/a&gt;接下来是修改主目录下的_config.yml，在最后添加如下内容&lt;/h4&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;live2d:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scriptFrom: local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pluginRootPath: live2dw/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pluginJsPath: lib/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pluginModelPath: assets/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tagMode: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  debug: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  model:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use: live2d-widget-model-z16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  display:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position: right&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mobile:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    show: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;然后部署到服务器上&quot;&gt;&lt;a href=&quot;#然后部署到服务器上&quot; class=&quot;headerlink&quot; title=&quot;然后部署到服务器上&quot;&gt;&lt;/a&gt;然后部署到服务器上&lt;/h4&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;就可以在博客上看到看板娘了&quot;&gt;&lt;a href=&quot;#就可以在博客上看到看板娘了&quot; class=&quot;headerlink&quot; title=&quot;就可以在博客上看到看板娘了&quot;&gt;&lt;/a&gt;就可以在博客上看到看板娘了&lt;/h4&gt;&lt;h4 id=&quot;我的live2d是用原来的某个资源包用药水制作师的相关资源替换得到的，具体方法还有点迷&quot;&gt;&lt;a href=&quot;#我的live2d是用原来的某个资源包用药水制作师的相关资源替换得到的，具体方法还有点迷&quot; class=&quot;headerlink&quot; title=&quot;我的live2d是用原来的某个资源包用药水制作师的相关资源替换得到的，具体方法还有点迷&quot;&gt;&lt;/a&gt;我的live2d是用原来的某个资源包用&lt;a href=&quot;http://www.zizi.world/src/live2d/Potion-Maker.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;药水制作师&lt;/a&gt;的相关资源替换得到的，具体方法还有点迷&lt;/h4&gt;&lt;h4 id=&quot;然后&quot;&gt;&lt;a href=&quot;#然后&quot; class=&quot;headerlink&quot; title=&quot;然后&quot;&gt;&lt;/a&gt;然后&lt;/h4&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;就大功告成了&quot;&gt;&lt;a href=&quot;#就大功告成了&quot; class=&quot;headerlink&quot; title=&quot;就大功告成了&quot;&gt;&lt;/a&gt;就大功告成了&lt;/h4&gt;
    
    </summary>
    
      <category term="存档" scheme="http://yoursite.com/categories/%E5%AD%98%E6%A1%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>.vimrc的基础配置</title>
    <link href="http://yoursite.com/2018/09/16/vimrc%E7%9A%84%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/09/16/vimrc的基础配置/</id>
    <published>2018-09-16T07:55:08.000Z</published>
    <updated>2018-11-13T12:24:04.927Z</updated>
    
    <content type="html"><![CDATA[<p>说起vim的话，配置的时候到处查资料确实不快，加上平常也不用各种插件，因此就只列出.vimrc的最基础的语句<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span>   <span class="comment">"设置行号</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>  <span class="comment">"设置语法高亮</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span> </span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span>  </span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span>  <span class="comment">"以上三行设置tab宽度为4个空格</span></span><br><span class="line"><span class="keyword">set</span> expandtab  <span class="comment">"敲入tab自动转化为空格</span></span><br><span class="line"><span class="keyword">set</span> guifont=Dejavu_Sans_Mono:h10 <span class="comment">"设置字体大小(这里是DejaVu Sans Mono 10号字体)</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">cindent</span> <span class="comment">"设置c的智能缩进</span></span><br><span class="line"><span class="keyword">filetype</span> <span class="keyword">on</span> <span class="comment">"侦测文件类型</span></span><br><span class="line"><span class="keyword">colorscheme</span> xoria256 <span class="comment">"设置主题(可以在官网上下载然后放入colors文件夹中)</span></span><br><span class="line"><span class="keyword">set</span> nocompatible <span class="comment">"去掉有关vi的一致性</span></span><br><span class="line"><span class="keyword">set</span> backspace=<span class="built_in">indent</span>,eol,start <span class="comment">"解决backsapce键不能使用的问题</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="string">' '</span><span class="string">'&lt;ESC&gt;i "自动补全'</span><span class="string">' '</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="string">" "</span><span class="string">"&lt;ESC&gt;i "</span>自动补全<span class="string">""</span></span><br><span class="line"><span class="keyword">inoremap</span> ( ()<span class="symbol">&lt;ESC&gt;</span>i <span class="comment">"自动补全()</span></span><br><span class="line"><span class="keyword">inoremap</span> [ []<span class="symbol">&lt;ESC&gt;</span>i <span class="comment">"自动补全[]</span></span><br><span class="line"><span class="keyword">inoremap</span> &#123; &#123;&#125;<span class="symbol">&lt;ESC&gt;</span>i </span><br><span class="line"><span class="keyword">inoremap</span> &#123;<span class="symbol">&lt;CR&gt;</span> &#123;<span class="symbol">&lt;CR&gt;</span>&#125;<span class="symbol">&lt;ESC&gt;</span>O</span><br><span class="line"><span class="comment">"若按下&#123;后立即按下回车就可以自动打出&#125;并缩进, 否则直接在本行输出&#123;&#125;</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;C-A&gt;</span> ggVG <span class="comment">"设置Ctrl+A全选</span></span><br><span class="line"><span class="keyword">vmap</span> <span class="symbol">&lt;C-c&gt;</span> <span class="string">"+y "</span>设置Ctrl+C复制</span><br><span class="line"><span class="keyword">vmap</span> <span class="symbol">&lt;C-x&gt;</span> <span class="string">"+d "</span>设置Ctrl+<span class="keyword">X</span>剪切</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;C-S&gt;</span> :<span class="keyword">update</span><span class="symbol">&lt;CR&gt;</span> <span class="comment">"设置Ctrl+S保存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">CleverTab</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">strpart</span>( <span class="built_in">getline</span>(<span class="string">'.'</span>), <span class="number">0</span>, <span class="keyword">col</span>(<span class="string">'.'</span>)-<span class="number">1</span> ) =~ <span class="string">'^\s*$'</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"\&lt;Tab&gt;"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"\&lt;C-N&gt;"</span></span><br><span class="line">        <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;Tab&gt;</span> <span class="symbol">&lt;C-R&gt;</span>=CleverTab()<span class="symbol">&lt;CR&gt;</span> <span class="comment">"tab键在文中寻找单词补全</span></span><br><span class="line"><span class="comment">"粘贴可以直接用p或者Shift+Insert</span></span><br></pre></td></tr></table></figure></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说起vim的话，配置的时候到处查资料确实不快，加上平常也不用各种插件，因此就只列出.vimrc的最基础的语句&lt;br&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;nu&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;&quot;设置行号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;&quot;设置语法高亮&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;shiftwidth&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; softtabstop=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; tabstop=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;&quot;以上三行设置tab宽度为4个空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; expandtab  &lt;span class=&quot;comment&quot;&gt;&quot;敲入tab自动转化为空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; guifont=Dejavu_Sans_Mono:h10 &lt;span class=&quot;comment&quot;&gt;&quot;设置字体大小(这里是DejaVu Sans Mono 10号字体)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;cindent&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&quot;设置c的智能缩进&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&quot;侦测文件类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;colorscheme&lt;/span&gt; xoria256 &lt;span class=&quot;comment&quot;&gt;&quot;设置主题(可以在官网上下载然后放入colors文件夹中)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; nocompatible &lt;span class=&quot;comment&quot;&gt;&quot;去掉有关vi的一致性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; backspace=&lt;span class=&quot;built_in&quot;&gt;indent&lt;/span&gt;,eol,start &lt;span class=&quot;comment&quot;&gt;&quot;解决backsapce键不能使用的问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inoremap&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;ESC&amp;gt;i &quot;自动补全&#39;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inoremap&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;ESC&amp;gt;i &quot;&lt;/span&gt;自动补全&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inoremap&lt;/span&gt; ( ()&lt;span class=&quot;symbol&quot;&gt;&amp;lt;ESC&amp;gt;&lt;/span&gt;i &lt;span class=&quot;comment&quot;&gt;&quot;自动补全()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inoremap&lt;/span&gt; [ []&lt;span class=&quot;symbol&quot;&gt;&amp;lt;ESC&amp;gt;&lt;/span&gt;i &lt;span class=&quot;comment&quot;&gt;&quot;自动补全[]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inoremap&lt;/span&gt; &amp;#123; &amp;#123;&amp;#125;&lt;span class=&quot;symbol&quot;&gt;&amp;lt;ESC&amp;gt;&lt;/span&gt;i &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inoremap&lt;/span&gt; &amp;#123;&lt;span class=&quot;symbol&quot;&gt;&amp;lt;CR&amp;gt;&lt;/span&gt; &amp;#123;&lt;span class=&quot;symbol&quot;&gt;&amp;lt;CR&amp;gt;&lt;/span&gt;&amp;#125;&lt;span class=&quot;symbol&quot;&gt;&amp;lt;ESC&amp;gt;&lt;/span&gt;O&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&quot;若按下&amp;#123;后立即按下回车就可以自动打出&amp;#125;并缩进, 否则直接在本行输出&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;nmap&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&amp;lt;C-A&amp;gt;&lt;/span&gt; ggVG &lt;span class=&quot;comment&quot;&gt;&quot;设置Ctrl+A全选&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;vmap&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&amp;lt;C-c&amp;gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;+y &quot;&lt;/span&gt;设置Ctrl+C复制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;vmap&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&amp;lt;C-x&amp;gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;+d &quot;&lt;/span&gt;设置Ctrl+&lt;span class=&quot;keyword&quot;&gt;X&lt;/span&gt;剪切&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;nmap&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&amp;lt;C-S&amp;gt;&lt;/span&gt; :&lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;&amp;lt;CR&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&quot;设置Ctrl+S保存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;! &lt;span class=&quot;title&quot;&gt;CleverTab&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;strpart&lt;/span&gt;( &lt;span class=&quot;built_in&quot;&gt;getline&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;col&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;)-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) =~ &lt;span class=&quot;string&quot;&gt;&#39;^\s*$&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;\&amp;lt;Tab&amp;gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;\&amp;lt;C-N&amp;gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inoremap&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&amp;lt;Tab&amp;gt;&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&amp;lt;C-R&amp;gt;&lt;/span&gt;=CleverTab()&lt;span class=&quot;symbol&quot;&gt;&amp;lt;CR&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&quot;tab键在文中寻找单词补全&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&quot;粘贴可以直接用p或者Shift+Insert&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="存档" scheme="http://yoursite.com/categories/%E5%AD%98%E6%A1%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>东方Project 16.5 replay文件解析</title>
    <link href="http://yoursite.com/2018/09/16/%E4%B8%9C%E6%96%B9Project-16-5-replay-%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/09/16/东方Project-16-5-replay-解析/</id>
    <published>2018-09-15T16:00:00.000Z</published>
    <updated>2018-12-03T13:05:55.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="replay的原始文件-rpy文件"><a href="#replay的原始文件-rpy文件" class="headerlink" title="replay的原始文件(.rpy文件)"></a>replay的原始文件(.rpy文件)</h1><hr><p>首先我们来看一个例子，如下图<br>&lt;/br&gt;<br><img src="https://www.zizi.world/pic/2018_9_15/q1.jpg" alt=""><br>&lt;/br&gt;<br>在文件的最后，我们可以清楚地看到rep解析的各种信息，包括机签(RERERE)、日期(18/09/08)、关卡号(6)等，通过这些，网站可以正确解析出rep，但是我们的目的不仅限于此，更进一步地，我们需要解析出rep包含的最重要信息——机师在何时按了什么键。<br><a id="more"></a></p><h1 id="replay的解密流程"><a href="#replay的解密流程" class="headerlink" title="replay的解密流程"></a>replay的解密流程</h1><hr><p>首先找到replay字符的位置，风神录之后所有的replay解密函数均在这一块<br><img src="https://www.zizi.world/pic/2018_9_15/q2.jpg" alt=""><br>点进去之后就会看到此字符串在44F960出现，追踪至44F960<br><img src="https://www.zizi.world/pic/2018_9_15/q3.jpg" alt=""><br>这两个函数就是主要的解压函数了，点进去看下<br>401DA0(以后称作decode)<br><img src="https://www.zizi.world/pic/2018_9_15/q4.jpg" alt=""><br>45D7E0(以后称作decompress)<br><img src="https://www.zizi.world/pic/2018_9_15/q5.jpg" alt=""><br>是不是看着很繁琐？不过由于几乎所有replay文件共用一套解密算法中的两个函数，因此就直接用别人已经翻译好了的代码了，主要代码来自<a href="https://github.com/Fluorohydride/threp" target="_blank" rel="noopener">这里</a>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//decode</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * buffer, <span class="keyword">int</span> length, <span class="keyword">int</span> block_size, <span class="keyword">unsigned</span> <span class="keyword">char</span> base, <span class="keyword">unsigned</span> <span class="keyword">char</span> add)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> * tbuf = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[length];</span><br><span class="line"><span class="built_in">memcpy</span>(tbuf, buffer, length);</span><br><span class="line"><span class="keyword">int</span> i, p = <span class="number">0</span>, tp1, tp2, hf, left = length;</span><br><span class="line"><span class="keyword">if</span> ((left % block_size) &lt; (block_size / <span class="number">4</span>))</span><br><span class="line">left -= left % block_size;</span><br><span class="line">left -= length &amp; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left) &#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; block_size)</span><br><span class="line">block_size = left;</span><br><span class="line">tp1 = p + block_size - <span class="number">1</span>;</span><br><span class="line">tp2 = p + block_size - <span class="number">2</span>;</span><br><span class="line">hf = (block_size + (block_size &amp; <span class="number">0x1</span>)) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; hf; ++i, ++p) &#123;</span><br><span class="line">buffer[tp1] = tbuf[p] ^ base;</span><br><span class="line">base += add;</span><br><span class="line">tp1 -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">hf = block_size / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; hf; ++i, ++p) &#123;</span><br><span class="line">buffer[tp2] = tbuf[p] ^ base;</span><br><span class="line">base += add;</span><br><span class="line">tp2 -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">left -= block_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] tbuf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>decompress被分成了两个函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//decompress</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_bit</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* buffer, <span class="keyword">unsigned</span> <span class="keyword">int</span> &amp;pointer, <span class="keyword">unsigned</span> <span class="keyword">char</span> &amp;filter, <span class="keyword">unsigned</span> <span class="keyword">char</span> length)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> current;</span><br><span class="line">current = buffer[pointer];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">result &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (current &amp; filter)</span><br><span class="line">result |= <span class="number">0x1</span>;</span><br><span class="line">filter &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (filter == <span class="number">0</span>) &#123;</span><br><span class="line">pointer++;</span><br><span class="line">current = buffer[pointer];</span><br><span class="line">filter = <span class="number">0x80</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">decompress</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * buffer, <span class="keyword">unsigned</span> <span class="keyword">char</span> * decode, <span class="keyword">unsigned</span> <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> pointer = <span class="number">0</span>, dest = <span class="number">0</span>, index, bits, i;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> filter = <span class="number">0x80</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> dict[<span class="number">0x2010</span>];</span><br><span class="line"><span class="built_in">memset</span>(dict, <span class="number">0</span>, <span class="number">0x2010</span>);</span><br><span class="line"><span class="keyword">while</span> (pointer &lt; length) &#123;</span><br><span class="line">bits = get_bit(buffer, pointer, filter, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (pointer &gt;= length)</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line"><span class="keyword">if</span> (bits) &#123;</span><br><span class="line">bits = get_bit(buffer, pointer, filter, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">if</span> (pointer &gt;= length)</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">decode[dest] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>) bits;</span><br><span class="line">dict[dest &amp; <span class="number">0x1fff</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>) bits;</span><br><span class="line">dest++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">bits = get_bit(buffer, pointer, filter, <span class="number">13</span>);</span><br><span class="line"><span class="keyword">if</span> (pointer &gt;= length)</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">index = bits - <span class="number">1</span>;</span><br><span class="line">bits = get_bit(buffer, pointer, filter, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (pointer &gt;= length)</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">bits += <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; bits; ++i) &#123;</span><br><span class="line">dict[dest &amp; <span class="number">0x1fff</span>] = dict[index + i];</span><br><span class="line">decode[dest] = dict[index + i];</span><br><span class="line">dest++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&lt;/br&gt;<br>解压完的replay文件(.raw)</p><hr><p><img src="https://www.zizi.world/pic/2018_9_15/q6.jpg" alt=""><br>&lt;/br&gt;<br><img src="https://www.zizi.world/pic/2018_9_15/q7.jpg" alt=""></p><h4 id="0000-0000，从右到左依次为0-7"><a href="#0000-0000，从右到左依次为0-7" class="headerlink" title="0000 0000，从右到左依次为0~7"></a>0000 0000，从右到左依次为0~7</h4><h4 id="·-如果第0位为1，则此时Z键被按住"><a href="#·-如果第0位为1，则此时Z键被按住" class="headerlink" title="·　如果第0位为1，则此时Z键被按住"></a>·　如果第0位为1，则此时Z键被按住</h4><h4 id="·-如果第1位为1，则此时X键被按住"><a href="#·-如果第1位为1，则此时X键被按住" class="headerlink" title="·　如果第1位为1，则此时X键被按住"></a>·　如果第1位为1，则此时X键被按住</h4><h4 id="·-如果第3位为1，则此时shift键被按住"><a href="#·-如果第3位为1，则此时shift键被按住" class="headerlink" title="·　如果第3位为1，则此时shift键被按住"></a>·　如果第3位为1，则此时shift键被按住</h4><h4 id="·-如果第4位为1，则此时↑键被按住"><a href="#·-如果第4位为1，则此时↑键被按住" class="headerlink" title="·　如果第4位为1，则此时↑键被按住"></a>·　如果第4位为1，则此时↑键被按住</h4><h4 id="·-如果第5位为1，则此时↓键被按住"><a href="#·-如果第5位为1，则此时↓键被按住" class="headerlink" title="·　如果第5位为1，则此时↓键被按住"></a>·　如果第5位为1，则此时↓键被按住</h4><h4 id="·-如果第6位为1，则此时←键被按住"><a href="#·-如果第6位为1，则此时←键被按住" class="headerlink" title="·　如果第6位为1，则此时←键被按住"></a>·　如果第6位为1，则此时←键被按住</h4><h4 id="·-如果第7位为1，则此时→键被按住"><a href="#·-如果第7位为1，则此时→键被按住" class="headerlink" title="·　如果第7位为1，则此时→键被按住"></a>·　如果第7位为1，则此时→键被按住</h4><h4 id="因此，通过位运算，我们可以得到按键信息并输入到对应的文件"><a href="#因此，通过位运算，我们可以得到按键信息并输入到对应的文件" class="headerlink" title="因此，通过位运算，我们可以得到按键信息并输入到对应的文件"></a>因此，通过位运算，我们可以得到按键信息并输入到对应的文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> key_inf[<span class="number">10</span>][<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="string">"z"</span>,</span><br><span class="line">    <span class="string">"x"</span>,</span><br><span class="line">    <span class="string">""</span>,</span><br><span class="line">    <span class="string">"shift"</span>,</span><br><span class="line">    <span class="string">"up"</span>,</span><br><span class="line">    <span class="string">"down"</span>,</span><br><span class="line">    <span class="string">"left"</span>,</span><br><span class="line">    <span class="string">"right"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_data</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *data, <span class="keyword">char</span> *file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> fraw[<span class="number">50</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(fraw, <span class="string">"%s_key.txt"</span>, file);</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Name: "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; data[i] != <span class="number">0x20</span>; i++) <span class="built_in">printf</span>(<span class="string">"%c"</span>, data[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nDate: "</span>);</span><br><span class="line">    <span class="keyword">char</span> now[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">time_t</span> tt = *(<span class="keyword">int</span> *)(&amp;data[<span class="number">20</span>]);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">ttime</span>;</span></span><br><span class="line">    ttime = localtime(&amp;tt);</span><br><span class="line">    strftime(now, <span class="number">40</span>, <span class="string">"%Y/%m/%d %H:%M:%S"</span>, ttime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\nStage: "</span>, now);</span><br><span class="line">    <span class="keyword">int</span> day = *(<span class="keyword">int</span> *)(&amp;data[<span class="number">0x8C</span>]);</span><br><span class="line">    <span class="keyword">if</span>(day / <span class="number">7</span> == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"In-"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(day / <span class="number">7</span> == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"Nightmare-"</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; game_mode[day % <span class="number">7</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-%d\n"</span>, data[<span class="number">0x90</span>] + <span class="number">1</span>);</span><br><span class="line">    FILE *key;</span><br><span class="line">    key = fopen(fraw, <span class="string">"wb"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0x180</span>; data[i] != <span class="number">0xFF</span>; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((i - <span class="number">0x180</span>) % <span class="number">360</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">fprintf</span>(key, <span class="string">"%s%d s:\r\n"</span>, i == <span class="number">0x180</span> ? <span class="string">""</span> : <span class="string">"\r\n\r\n"</span>, (i - <span class="number">0x180</span>) / <span class="number">360</span>);</span><br><span class="line">        <span class="keyword">int</span> temp = i;</span><br><span class="line">        <span class="built_in">fprintf</span>(key, <span class="string">"\""</span>);</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; temp + <span class="number">6</span>; i += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(key, <span class="string">"( "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">                <span class="keyword">if</span>(data[i] &amp; (<span class="number">1</span> &lt;&lt; j))</span><br><span class="line">                    <span class="built_in">fprintf</span>(key, <span class="string">"%s "</span>, key_inf[j]);</span><br><span class="line">            <span class="built_in">fprintf</span>(key, <span class="string">") "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fprintf</span>(key, <span class="string">"\""</span>);</span><br><span class="line">        <span class="keyword">if</span>((i - <span class="number">0x180</span>) % <span class="number">5</span> == <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">fprintf</span>(key, <span class="string">"\r\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">fprintf</span>(key, <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，整个文件解析结束<br>至于解压出来的效果，就是这样了<br><img src="https://www.zizi.world/pic/2018_9_15/q8.jpg" alt=""><br>&lt;/br&gt;<br><img src="https://www.zizi.world/pic/2018_9_15/q9.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;replay的原始文件-rpy文件&quot;&gt;&lt;a href=&quot;#replay的原始文件-rpy文件&quot; class=&quot;headerlink&quot; title=&quot;replay的原始文件(.rpy文件)&quot;&gt;&lt;/a&gt;replay的原始文件(.rpy文件)&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;首先我们来看一个例子，如下图&lt;br&gt;&amp;lt;/br&amp;gt;&lt;br&gt;&lt;img src=&quot;https://www.zizi.world/pic/2018_9_15/q1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&amp;lt;/br&amp;gt;&lt;br&gt;在文件的最后，我们可以清楚地看到rep解析的各种信息，包括机签(RERERE)、日期(18/09/08)、关卡号(6)等，通过这些，网站可以正确解析出rep，但是我们的目的不仅限于此，更进一步地，我们需要解析出rep包含的最重要信息——机师在何时按了什么键。&lt;br&gt;
    
    </summary>
    
      <category term="东方Project" scheme="http://yoursite.com/categories/%E4%B8%9C%E6%96%B9Project/"/>
    
    
  </entry>
  
</feed>
